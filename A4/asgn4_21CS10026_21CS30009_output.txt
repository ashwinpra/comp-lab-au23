
----------LINE: 2----------

----------LINE: 3----------

----------LINE: 4----------

----------LINE: 5----------

----------LINE: 6----------

----------LINE: 7----------

----------LINE: 8----------

----------LINE: 9----------
[Line 9] : type_specifier -> int
[Line 9] : declaration_specifiers_opt -> epsilon
[Line 9] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 9] : pointer_opt -> epsilon
[Line 9] : direct_declarator -> identifier
[Line 9] : identifier_list_opt -> epsilon
[Line 9] : direct_declarator -> direct_declarator ( identifier_list_opt )
[Line 9] : declarator -> pointer_opt direct_declarator

----------LINE: 10----------
[Line 10] : type_specifier -> int
[Line 10] : declaration_specifiers_opt -> epsilon
[Line 10] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 10] : pointer_opt -> epsilon
[Line 10] : direct_declarator -> identifier
[Line 10] : declarator -> pointer_opt direct_declarator
[Line 10] : init_declarator -> declarator
[Line 10] : init_declarator_list -> init_declarator
[Line 10] : pointer_opt -> epsilon
[Line 10] : direct_declarator -> identifier
[Line 10] : declarator -> pointer_opt direct_declarator
[Line 10] : init_declarator -> declarator
[Line 10] : init_declarator_list -> init_declarator_list , init_declarator
[Line 10] : pointer_opt -> epsilon
[Line 10] : direct_declarator -> identifier
[Line 10] : declarator -> pointer_opt direct_declarator
[Line 10] : init_declarator -> declarator
[Line 10] : init_declarator_list -> init_declarator_list , init_declarator
[Line 10] : pointer_opt -> epsilon
[Line 10] : direct_declarator -> identifier
[Line 10] : declarator -> pointer_opt direct_declarator
[Line 10] : init_declarator -> declarator
[Line 10] : init_declarator_list -> init_declarator_list , init_declarator
[Line 10] : init_declarator_list_opt -> init_declarator_list
[Line 10] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 10] : block_item -> declaration
[Line 10] : block_item_list -> block_item

----------LINE: 11----------
[Line 11] : type_specifier -> char
[Line 11] : declaration_specifiers_opt -> epsilon
[Line 11] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 11] : pointer_opt -> epsilon
[Line 11] : direct_declarator -> identifier
[Line 11] : type_qualifier_list_opt -> epsilon
[Line 11] : assignment_expression_opt -> epsilon
[Line 11] : direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line 11] : declarator -> pointer_opt direct_declarator
[Line 11] : primary-expression: string-literal[Line 11] : postfix_expression -> primary_expression
[Line 11] : unary_expression -> postfix_expression
[Line 11] : cast_expression -> unary_expression
[Line 11] : multiplicative_expression -> cast_expression
[Line 11] : additive_expression -> multiplicative_expression
[Line 11] : shift_expression -> additive_expression
[Line 11] : relational_expression -> shift_expression
[Line 11] : equality_expression -> relational_expression
[Line 11] : and_expression -> equality_expression
[Line 11] : exclusive_or_expression -> and_expression
[Line 11] : inclusive_or_expression -> exclusive_or_expression
[Line 11] : logical_and_expression -> inclusive_or_expression
[Line 11] : logical_or_expression -> logical_and_expression
[Line 11] : conditional_expression -> logical_or_expression
[Line 11] : assignment_expression -> conditional_expression
[Line 11] : initializer -> assignment_expression
[Line 11] : init_declarator -> declarator = initializer
[Line 11] : init_declarator_list -> init_declarator
[Line 11] : init_declarator_list_opt -> init_declarator_list
[Line 11] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 11] : block_item -> declaration
[Line 11] : block_item_list -> block_item_list block_item

----------LINE: 12----------
[Line 12] : type_specifier -> char
[Line 12] : declaration_specifiers_opt -> epsilon
[Line 12] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 12] : pointer_opt -> epsilon
[Line 12] : direct_declarator -> identifier
[Line 12] : declarator -> pointer_opt direct_declarator
[Line 12] : primary-expression: constant[Line 12] : postfix_expression -> primary_expression
[Line 12] : unary_expression -> postfix_expression
[Line 12] : cast_expression -> unary_expression
[Line 12] : multiplicative_expression -> cast_expression
[Line 12] : additive_expression -> multiplicative_expression
[Line 12] : shift_expression -> additive_expression
[Line 12] : relational_expression -> shift_expression
[Line 12] : equality_expression -> relational_expression
[Line 12] : and_expression -> equality_expression
[Line 12] : exclusive_or_expression -> and_expression
[Line 12] : inclusive_or_expression -> exclusive_or_expression
[Line 12] : logical_and_expression -> inclusive_or_expression
[Line 12] : logical_or_expression -> logical_and_expression
[Line 12] : conditional_expression -> logical_or_expression
[Line 12] : assignment_expression -> conditional_expression
[Line 12] : initializer -> assignment_expression
[Line 12] : init_declarator -> declarator = initializer
[Line 12] : init_declarator_list -> init_declarator
[Line 12] : init_declarator_list_opt -> init_declarator_list
[Line 12] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 12] : block_item -> declaration
[Line 12] : block_item_list -> block_item_list block_item

----------LINE: 13----------
[Line 13] : type_specifier -> float
[Line 13] : declaration_specifiers_opt -> epsilon
[Line 13] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 13] : pointer_opt -> epsilon
[Line 13] : direct_declarator -> identifier
[Line 13] : declarator -> pointer_opt direct_declarator
[Line 13] : primary-expression: constant[Line 13] : postfix_expression -> primary_expression
[Line 13] : unary_expression -> postfix_expression
[Line 13] : cast_expression -> unary_expression
[Line 13] : multiplicative_expression -> cast_expression
[Line 13] : additive_expression -> multiplicative_expression
[Line 13] : shift_expression -> additive_expression
[Line 13] : relational_expression -> shift_expression
[Line 13] : equality_expression -> relational_expression
[Line 13] : and_expression -> equality_expression
[Line 13] : exclusive_or_expression -> and_expression
[Line 13] : inclusive_or_expression -> exclusive_or_expression
[Line 13] : logical_and_expression -> inclusive_or_expression
[Line 13] : logical_or_expression -> logical_and_expression
[Line 13] : conditional_expression -> logical_or_expression
[Line 13] : assignment_expression -> conditional_expression
[Line 13] : initializer -> assignment_expression
[Line 13] : init_declarator -> declarator = initializer
[Line 13] : init_declarator_list -> init_declarator
[Line 13] : init_declarator_list_opt -> init_declarator_list
[Line 13] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 13] : block_item -> declaration
[Line 13] : block_item_list -> block_item_list block_item

----------LINE: 14----------
[Line 14] : primary-expression: identifier[Line 14] : postfix_expression -> primary_expression
[Line 14] : unary_expression -> postfix_expression
[Line 14] : assignment_operator -> =
[Line 14] : primary-expression: constant[Line 14] : postfix_expression -> primary_expression
[Line 14] : unary_expression -> postfix_expression
[Line 14] : cast_expression -> unary_expression
[Line 14] : multiplicative_expression -> cast_expression
[Line 14] : additive_expression -> multiplicative_expression
[Line 14] : shift_expression -> additive_expression
[Line 14] : relational_expression -> shift_expression
[Line 14] : equality_expression -> relational_expression
[Line 14] : and_expression -> equality_expression
[Line 14] : exclusive_or_expression -> and_expression
[Line 14] : inclusive_or_expression -> exclusive_or_expression
[Line 14] : logical_and_expression -> inclusive_or_expression
[Line 14] : logical_or_expression -> logical_and_expression
[Line 14] : conditional_expression -> logical_or_expression
[Line 14] : assignment_expression -> conditional_expression
[Line 14] : assignment_expression -> unary_expression assignment_operator assignment_expression
[Line 14] : expression -> assignment_expression
[Line 14] : primary-expression: identifier[Line 14] : postfix_expression -> primary_expression
[Line 14] : unary_expression -> postfix_expression
[Line 14] : cast_expression -> unary_expression
[Line 14] : multiplicative_expression -> cast_expression
[Line 14] : additive_expression -> multiplicative_expression
[Line 14] : shift_expression -> additive_expression
[Line 14] : relational_expression -> shift_expression
[Line 14] : primary-expression: constant[Line 14] : postfix_expression -> primary_expression
[Line 14] : unary_expression -> postfix_expression
[Line 14] : cast_expression -> unary_expression
[Line 14] : multiplicative_expression -> cast_expression
[Line 14] : additive_expression -> multiplicative_expression
[Line 14] : shift_expression -> additive_expression
[Line 14] : relational_expression -> relational_expression < shift_expression
[Line 14] : equality_expression -> relational_expression
[Line 14] : and_expression -> equality_expression
[Line 14] : exclusive_or_expression -> and_expression
[Line 14] : inclusive_or_expression -> exclusive_or_expression
[Line 14] : logical_and_expression -> inclusive_or_expression
[Line 14] : logical_or_expression -> logical_and_expression
[Line 14] : conditional_expression -> logical_or_expression
[Line 14] : assignment_expression -> conditional_expression
[Line 14] : expression -> assignment_expression
[Line 14] : primary-expression: identifier[Line 14] : postfix_expression -> primary_expression
[Line 14] : postfix_expression -> postfix_expression ++
[Line 14] : unary_expression -> postfix_expression
[Line 14] : cast_expression -> unary_expression
[Line 14] : multiplicative_expression -> cast_expression
[Line 14] : additive_expression -> multiplicative_expression
[Line 14] : shift_expression -> additive_expression
[Line 14] : relational_expression -> shift_expression
[Line 14] : equality_expression -> relational_expression
[Line 14] : and_expression -> equality_expression
[Line 14] : exclusive_or_expression -> and_expression
[Line 14] : inclusive_or_expression -> exclusive_or_expression
[Line 14] : logical_and_expression -> inclusive_or_expression
[Line 14] : logical_or_expression -> logical_and_expression
[Line 14] : conditional_expression -> logical_or_expression
[Line 14] : assignment_expression -> conditional_expression
[Line 14] : expression -> assignment_expression

----------LINE: 15----------
[Line 15] : primary-expression: identifier[Line 15] : postfix_expression -> primary_expression
[Line 15] : unary_expression -> postfix_expression
[Line 15] : cast_expression -> unary_expression
[Line 15] : multiplicative_expression -> cast_expression
[Line 15] : additive_expression -> multiplicative_expression
[Line 15] : shift_expression -> additive_expression
[Line 15] : relational_expression -> shift_expression
[Line 15] : primary-expression: constant[Line 15] : postfix_expression -> primary_expression
[Line 15] : unary_expression -> postfix_expression
[Line 15] : cast_expression -> unary_expression
[Line 15] : multiplicative_expression -> cast_expression
[Line 15] : additive_expression -> multiplicative_expression
[Line 15] : shift_expression -> additive_expression
[Line 15] : relational_expression -> relational_expression < shift_expression
[Line 15] : equality_expression -> relational_expression
[Line 15] : and_expression -> equality_expression
[Line 15] : exclusive_or_expression -> and_expression
[Line 15] : inclusive_or_expression -> exclusive_or_expression
[Line 15] : logical_and_expression -> inclusive_or_expression
[Line 15] : logical_or_expression -> logical_and_expression
[Line 15] : conditional_expression -> logical_or_expression
[Line 15] : assignment_expression -> conditional_expression
[Line 15] : expression -> assignment_expression

----------LINE: 16----------
[Line 16] : primary-expression: identifier[Line 16] : postfix_expression -> primary_expression
[Line 16] : primary-expression: string-literal[Line 16] : postfix_expression -> primary_expression
[Line 16] : unary_expression -> postfix_expression
[Line 16] : cast_expression -> unary_expression
[Line 16] : multiplicative_expression -> cast_expression
[Line 16] : additive_expression -> multiplicative_expression
[Line 16] : shift_expression -> additive_expression
[Line 16] : relational_expression -> shift_expression
[Line 16] : equality_expression -> relational_expression
[Line 16] : and_expression -> equality_expression
[Line 16] : exclusive_or_expression -> and_expression
[Line 16] : inclusive_or_expression -> exclusive_or_expression
[Line 16] : logical_and_expression -> inclusive_or_expression
[Line 16] : logical_or_expression -> logical_and_expression
[Line 16] : conditional_expression -> logical_or_expression
[Line 16] : assignment_expression -> conditional_expression
[Line 16] : argument_expression_list -> assignment_expression
[Line 16] : primary-expression: identifier[Line 16] : postfix_expression -> primary_expression
[Line 16] : unary_expression -> postfix_expression
[Line 16] : cast_expression -> unary_expression
[Line 16] : multiplicative_expression -> cast_expression
[Line 16] : additive_expression -> multiplicative_expression
[Line 16] : shift_expression -> additive_expression
[Line 16] : relational_expression -> shift_expression
[Line 16] : equality_expression -> relational_expression
[Line 16] : and_expression -> equality_expression
[Line 16] : exclusive_or_expression -> and_expression
[Line 16] : inclusive_or_expression -> exclusive_or_expression
[Line 16] : logical_and_expression -> inclusive_or_expression
[Line 16] : logical_or_expression -> logical_and_expression
[Line 16] : conditional_expression -> logical_or_expression
[Line 16] : assignment_expression -> conditional_expression
[Line 16] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 16] : argument_expression_list_opt -> argument_expression_list
[Line 16] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 16] : unary_expression -> postfix_expression
[Line 16] : cast_expression -> unary_expression
[Line 16] : multiplicative_expression -> cast_expression
[Line 16] : additive_expression -> multiplicative_expression
[Line 16] : shift_expression -> additive_expression
[Line 16] : relational_expression -> shift_expression
[Line 16] : equality_expression -> relational_expression
[Line 16] : and_expression -> equality_expression
[Line 16] : exclusive_or_expression -> and_expression
[Line 16] : inclusive_or_expression -> exclusive_or_expression
[Line 16] : logical_and_expression -> inclusive_or_expression
[Line 16] : logical_or_expression -> logical_and_expression
[Line 16] : conditional_expression -> logical_or_expression
[Line 16] : assignment_expression -> conditional_expression
[Line 16] : expression -> assignment_expression
[Line 16] : expression_opt -> expression ;
[Line 16] : statement -> expression_statement
[Line 16] : block_item -> statement
[Line 16] : block_item_list -> block_item

----------LINE: 17----------
[Line 17] : compound_statement -> { block_item_list_opt }
[Line 17] : statement -> compound_statement

----------LINE: 18----------
[Line 18] : selection_statement -> if ( expression ) statement
[Line 18] : statement -> selection_statement
[Line 18] : block_item -> statement
[Line 18] : block_item_list -> block_item
[Line 18] : compound_statement -> { block_item_list_opt }
[Line 18] : statement -> compound_statement
[Line 18] : iteration_statement -> for ( expression_opt ; expression_opt ; expression_opt ) statement
[Line 18] : statement -> iteration_statement
[Line 18] : block_item -> statement
[Line 18] : block_item_list -> block_item_list block_item

----------LINE: 19----------

----------LINE: 20----------

----------LINE: 21----------
[Line 21] : type_specifier -> int
[Line 21] : declaration_specifiers_opt -> epsilon
[Line 21] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 21] : pointer_opt -> epsilon
[Line 21] : direct_declarator -> identifier
[Line 21] : type_qualifier_list_opt -> epsilon
[Line 21] : assignment_expression_opt -> epsilon
[Line 21] : direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line 21] : declarator -> pointer_opt direct_declarator
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> designation_opt initializer
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> initializer_list , designation_opt initializer
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> initializer_list , designation_opt initializer
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> initializer_list , designation_opt initializer
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> initializer_list , designation_opt initializer
[Line 21] : designation_opt -> epsilon
[Line 21] : primary-expression: constant[Line 21] : postfix_expression -> primary_expression
[Line 21] : unary_expression -> postfix_expression
[Line 21] : cast_expression -> unary_expression
[Line 21] : multiplicative_expression -> cast_expression
[Line 21] : additive_expression -> multiplicative_expression
[Line 21] : shift_expression -> additive_expression
[Line 21] : relational_expression -> shift_expression
[Line 21] : equality_expression -> relational_expression
[Line 21] : and_expression -> equality_expression
[Line 21] : exclusive_or_expression -> and_expression
[Line 21] : inclusive_or_expression -> exclusive_or_expression
[Line 21] : logical_and_expression -> inclusive_or_expression
[Line 21] : logical_or_expression -> logical_and_expression
[Line 21] : conditional_expression -> logical_or_expression
[Line 21] : assignment_expression -> conditional_expression
[Line 21] : initializer -> assignment_expression
[Line 21] : initializer_list -> initializer_list , designation_opt initializer
[Line 21] : initializer -> { initializer_list }
[Line 21] : init_declarator -> declarator = initializer
[Line 21] : init_declarator_list -> init_declarator
[Line 21] : init_declarator_list_opt -> init_declarator_list
[Line 21] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 21] : block_item -> declaration
[Line 21] : block_item_list -> block_item_list block_item

----------LINE: 22----------
[Line 22] : type_specifier -> int
[Line 22] : declaration_specifiers_opt -> epsilon
[Line 22] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 22] : pointer_opt -> epsilon
[Line 22] : direct_declarator -> identifier
[Line 22] : declarator -> pointer_opt direct_declarator
[Line 22] : primary-expression: identifier[Line 22] : postfix_expression -> primary_expression
[Line 22] : unary_expression -> postfix_expression
[Line 22] : cast_expression -> unary_expression
[Line 22] : multiplicative_expression -> cast_expression
[Line 22] : additive_expression -> multiplicative_expression
[Line 22] : shift_expression -> additive_expression
[Line 22] : relational_expression -> shift_expression
[Line 22] : equality_expression -> relational_expression
[Line 22] : and_expression -> equality_expression
[Line 22] : exclusive_or_expression -> and_expression
[Line 22] : inclusive_or_expression -> exclusive_or_expression
[Line 22] : logical_and_expression -> inclusive_or_expression
[Line 22] : logical_or_expression -> logical_and_expression
[Line 22] : conditional_expression -> logical_or_expression
[Line 22] : assignment_expression -> conditional_expression
[Line 22] : expression -> assignment_expression
[Line 22] : primary-expression: ( expression )[Line 22] : postfix_expression -> primary_expression
[Line 22] : unary_expression -> postfix_expression
[Line 22] : unary_expression -> sizeof unary_expression
[Line 22] : cast_expression -> unary_expression
[Line 22] : multiplicative_expression -> cast_expression
[Line 22] : primary-expression: identifier[Line 22] : postfix_expression -> primary_expression
[Line 22] : primary-expression: constant[Line 22] : postfix_expression -> primary_expression
[Line 22] : unary_expression -> postfix_expression
[Line 22] : cast_expression -> unary_expression
[Line 22] : multiplicative_expression -> cast_expression
[Line 22] : additive_expression -> multiplicative_expression
[Line 22] : shift_expression -> additive_expression
[Line 22] : relational_expression -> shift_expression
[Line 22] : equality_expression -> relational_expression
[Line 22] : and_expression -> equality_expression
[Line 22] : exclusive_or_expression -> and_expression
[Line 22] : inclusive_or_expression -> exclusive_or_expression
[Line 22] : logical_and_expression -> inclusive_or_expression
[Line 22] : logical_or_expression -> logical_and_expression
[Line 22] : conditional_expression -> logical_or_expression
[Line 22] : assignment_expression -> conditional_expression
[Line 22] : expression -> assignment_expression
[Line 22] : postfix_expression -> postfix_expression [ expression ]
[Line 22] : unary_expression -> postfix_expression
[Line 22] : cast_expression -> unary_expression
[Line 22] : multiplicative_expression -> cast_expression
[Line 22] : additive_expression -> multiplicative_expression
[Line 22] : shift_expression -> additive_expression
[Line 22] : relational_expression -> shift_expression
[Line 22] : equality_expression -> relational_expression
[Line 22] : and_expression -> equality_expression
[Line 22] : exclusive_or_expression -> and_expression
[Line 22] : inclusive_or_expression -> exclusive_or_expression
[Line 22] : logical_and_expression -> inclusive_or_expression
[Line 22] : logical_or_expression -> logical_and_expression
[Line 22] : conditional_expression -> logical_or_expression
[Line 22] : assignment_expression -> conditional_expression
[Line 22] : expression -> assignment_expression
[Line 22] : primary-expression: ( expression )[Line 22] : postfix_expression -> primary_expression
[Line 22] : unary_expression -> postfix_expression
[Line 22] : unary_expression -> sizeof unary_expression
[Line 22] : cast_expression -> unary_expression
[Line 22] : multiplicative_expression -> multiplicative_expression / cast_expression
[Line 22] : additive_expression -> multiplicative_expression
[Line 22] : shift_expression -> additive_expression
[Line 22] : relational_expression -> shift_expression
[Line 22] : equality_expression -> relational_expression
[Line 22] : and_expression -> equality_expression
[Line 22] : exclusive_or_expression -> and_expression
[Line 22] : inclusive_or_expression -> exclusive_or_expression
[Line 22] : logical_and_expression -> inclusive_or_expression
[Line 22] : logical_or_expression -> logical_and_expression
[Line 22] : conditional_expression -> logical_or_expression
[Line 22] : assignment_expression -> conditional_expression
[Line 22] : initializer -> assignment_expression
[Line 22] : init_declarator -> declarator = initializer
[Line 22] : init_declarator_list -> init_declarator
[Line 22] : init_declarator_list_opt -> init_declarator_list
[Line 22] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 22] : block_item -> declaration
[Line 22] : block_item_list -> block_item_list block_item

----------LINE: 23----------
[Line 23] : primary-expression: identifier[Line 23] : postfix_expression -> primary_expression
[Line 23] : primary-expression: identifier[Line 23] : postfix_expression -> primary_expression
[Line 23] : unary_expression -> postfix_expression
[Line 23] : cast_expression -> unary_expression
[Line 23] : multiplicative_expression -> cast_expression
[Line 23] : additive_expression -> multiplicative_expression
[Line 23] : shift_expression -> additive_expression
[Line 23] : relational_expression -> shift_expression
[Line 23] : equality_expression -> relational_expression
[Line 23] : and_expression -> equality_expression
[Line 23] : exclusive_or_expression -> and_expression
[Line 23] : inclusive_or_expression -> exclusive_or_expression
[Line 23] : logical_and_expression -> inclusive_or_expression
[Line 23] : logical_or_expression -> logical_and_expression
[Line 23] : conditional_expression -> logical_or_expression
[Line 23] : assignment_expression -> conditional_expression
[Line 23] : argument_expression_list -> assignment_expression
[Line 23] : primary-expression: constant[Line 23] : postfix_expression -> primary_expression
[Line 23] : unary_expression -> postfix_expression
[Line 23] : cast_expression -> unary_expression
[Line 23] : multiplicative_expression -> cast_expression
[Line 23] : additive_expression -> multiplicative_expression
[Line 23] : shift_expression -> additive_expression
[Line 23] : relational_expression -> shift_expression
[Line 23] : equality_expression -> relational_expression
[Line 23] : and_expression -> equality_expression
[Line 23] : exclusive_or_expression -> and_expression
[Line 23] : inclusive_or_expression -> exclusive_or_expression
[Line 23] : logical_and_expression -> inclusive_or_expression
[Line 23] : logical_or_expression -> logical_and_expression
[Line 23] : conditional_expression -> logical_or_expression
[Line 23] : assignment_expression -> conditional_expression
[Line 23] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 23] : primary-expression: identifier[Line 23] : postfix_expression -> primary_expression
[Line 23] : unary_expression -> postfix_expression
[Line 23] : cast_expression -> unary_expression
[Line 23] : multiplicative_expression -> cast_expression
[Line 23] : additive_expression -> multiplicative_expression
[Line 23] : primary-expression: constant[Line 23] : postfix_expression -> primary_expression
[Line 23] : unary_expression -> postfix_expression
[Line 23] : cast_expression -> unary_expression
[Line 23] : multiplicative_expression -> cast_expression
[Line 23] : additive_expression -> additive_expression - multiplicative_expression
[Line 23] : shift_expression -> additive_expression
[Line 23] : relational_expression -> shift_expression
[Line 23] : equality_expression -> relational_expression
[Line 23] : and_expression -> equality_expression
[Line 23] : exclusive_or_expression -> and_expression
[Line 23] : inclusive_or_expression -> exclusive_or_expression
[Line 23] : logical_and_expression -> inclusive_or_expression
[Line 23] : logical_or_expression -> logical_and_expression
[Line 23] : conditional_expression -> logical_or_expression
[Line 23] : assignment_expression -> conditional_expression
[Line 23] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 23] : argument_expression_list_opt -> argument_expression_list
[Line 23] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 23] : unary_expression -> postfix_expression
[Line 23] : cast_expression -> unary_expression
[Line 23] : multiplicative_expression -> cast_expression
[Line 23] : additive_expression -> multiplicative_expression
[Line 23] : shift_expression -> additive_expression
[Line 23] : relational_expression -> shift_expression
[Line 23] : equality_expression -> relational_expression
[Line 23] : and_expression -> equality_expression
[Line 23] : exclusive_or_expression -> and_expression
[Line 23] : inclusive_or_expression -> exclusive_or_expression
[Line 23] : logical_and_expression -> inclusive_or_expression
[Line 23] : logical_or_expression -> logical_and_expression
[Line 23] : conditional_expression -> logical_or_expression
[Line 23] : assignment_expression -> conditional_expression
[Line 23] : expression -> assignment_expression
[Line 23] : expression_opt -> expression ;
[Line 23] : statement -> expression_statement
[Line 23] : block_item -> statement
[Line 23] : block_item_list -> block_item_list block_item

----------LINE: 24----------
[Line 24] : primary-expression: identifier[Line 24] : postfix_expression -> primary_expression
[Line 24] : primary-expression: string-literal[Line 24] : postfix_expression -> primary_expression
[Line 24] : unary_expression -> postfix_expression
[Line 24] : cast_expression -> unary_expression
[Line 24] : multiplicative_expression -> cast_expression
[Line 24] : additive_expression -> multiplicative_expression
[Line 24] : shift_expression -> additive_expression
[Line 24] : relational_expression -> shift_expression
[Line 24] : equality_expression -> relational_expression
[Line 24] : and_expression -> equality_expression
[Line 24] : exclusive_or_expression -> and_expression
[Line 24] : inclusive_or_expression -> exclusive_or_expression
[Line 24] : logical_and_expression -> inclusive_or_expression
[Line 24] : logical_or_expression -> logical_and_expression
[Line 24] : conditional_expression -> logical_or_expression
[Line 24] : assignment_expression -> conditional_expression
[Line 24] : argument_expression_list -> assignment_expression
[Line 24] : argument_expression_list_opt -> argument_expression_list
[Line 24] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 24] : unary_expression -> postfix_expression
[Line 24] : cast_expression -> unary_expression
[Line 24] : multiplicative_expression -> cast_expression
[Line 24] : additive_expression -> multiplicative_expression
[Line 24] : shift_expression -> additive_expression
[Line 24] : relational_expression -> shift_expression
[Line 24] : equality_expression -> relational_expression
[Line 24] : and_expression -> equality_expression
[Line 24] : exclusive_or_expression -> and_expression
[Line 24] : inclusive_or_expression -> exclusive_or_expression
[Line 24] : logical_and_expression -> inclusive_or_expression
[Line 24] : logical_or_expression -> logical_and_expression
[Line 24] : conditional_expression -> logical_or_expression
[Line 24] : assignment_expression -> conditional_expression
[Line 24] : expression -> assignment_expression
[Line 24] : expression_opt -> expression ;
[Line 24] : statement -> expression_statement
[Line 24] : block_item -> statement
[Line 24] : block_item_list -> block_item_list block_item

----------LINE: 25----------
[Line 25] : primary-expression: identifier[Line 25] : postfix_expression -> primary_expression
[Line 25] : primary-expression: identifier[Line 25] : postfix_expression -> primary_expression
[Line 25] : unary_expression -> postfix_expression
[Line 25] : cast_expression -> unary_expression
[Line 25] : multiplicative_expression -> cast_expression
[Line 25] : additive_expression -> multiplicative_expression
[Line 25] : shift_expression -> additive_expression
[Line 25] : relational_expression -> shift_expression
[Line 25] : equality_expression -> relational_expression
[Line 25] : and_expression -> equality_expression
[Line 25] : exclusive_or_expression -> and_expression
[Line 25] : inclusive_or_expression -> exclusive_or_expression
[Line 25] : logical_and_expression -> inclusive_or_expression
[Line 25] : logical_or_expression -> logical_and_expression
[Line 25] : conditional_expression -> logical_or_expression
[Line 25] : assignment_expression -> conditional_expression
[Line 25] : argument_expression_list -> assignment_expression
[Line 25] : primary-expression: identifier[Line 25] : postfix_expression -> primary_expression
[Line 25] : unary_expression -> postfix_expression
[Line 25] : cast_expression -> unary_expression
[Line 25] : multiplicative_expression -> cast_expression
[Line 25] : additive_expression -> multiplicative_expression
[Line 25] : shift_expression -> additive_expression
[Line 25] : relational_expression -> shift_expression
[Line 25] : equality_expression -> relational_expression
[Line 25] : and_expression -> equality_expression
[Line 25] : exclusive_or_expression -> and_expression
[Line 25] : inclusive_or_expression -> exclusive_or_expression
[Line 25] : logical_and_expression -> inclusive_or_expression
[Line 25] : logical_or_expression -> logical_and_expression
[Line 25] : conditional_expression -> logical_or_expression
[Line 25] : assignment_expression -> conditional_expression
[Line 25] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 25] : argument_expression_list_opt -> argument_expression_list
[Line 25] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 25] : unary_expression -> postfix_expression
[Line 25] : cast_expression -> unary_expression
[Line 25] : multiplicative_expression -> cast_expression
[Line 25] : additive_expression -> multiplicative_expression
[Line 25] : shift_expression -> additive_expression
[Line 25] : relational_expression -> shift_expression
[Line 25] : equality_expression -> relational_expression
[Line 25] : and_expression -> equality_expression
[Line 25] : exclusive_or_expression -> and_expression
[Line 25] : inclusive_or_expression -> exclusive_or_expression
[Line 25] : logical_and_expression -> inclusive_or_expression
[Line 25] : logical_or_expression -> logical_and_expression
[Line 25] : conditional_expression -> logical_or_expression
[Line 25] : assignment_expression -> conditional_expression
[Line 25] : expression -> assignment_expression
[Line 25] : expression_opt -> expression ;
[Line 25] : statement -> expression_statement
[Line 25] : block_item -> statement
[Line 25] : block_item_list -> block_item_list block_item

----------LINE: 26----------

----------LINE: 27----------

----------LINE: 28----------
[Line 28] : type_specifier -> int
[Line 28] : declaration_specifiers_opt -> epsilon
[Line 28] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 28] : pointer_opt -> epsilon
[Line 28] : direct_declarator -> identifier
[Line 28] : declarator -> pointer_opt direct_declarator
[Line 28] : primary-expression: constant[Line 28] : postfix_expression -> primary_expression
[Line 28] : unary_expression -> postfix_expression
[Line 28] : cast_expression -> unary_expression
[Line 28] : multiplicative_expression -> cast_expression
[Line 28] : additive_expression -> multiplicative_expression
[Line 28] : shift_expression -> additive_expression
[Line 28] : relational_expression -> shift_expression
[Line 28] : equality_expression -> relational_expression
[Line 28] : and_expression -> equality_expression
[Line 28] : exclusive_or_expression -> and_expression
[Line 28] : inclusive_or_expression -> exclusive_or_expression
[Line 28] : logical_and_expression -> inclusive_or_expression
[Line 28] : logical_or_expression -> logical_and_expression
[Line 28] : conditional_expression -> logical_or_expression
[Line 28] : assignment_expression -> conditional_expression
[Line 28] : initializer -> assignment_expression
[Line 28] : init_declarator -> declarator = initializer
[Line 28] : init_declarator_list -> init_declarator
[Line 28] : init_declarator_list_opt -> init_declarator_list
[Line 28] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 28] : block_item -> declaration
[Line 28] : block_item_list -> block_item_list block_item

----------LINE: 29----------
[Line 29] : primary-expression: identifier[Line 29] : postfix_expression -> primary_expression
[Line 29] : argument_expression_list_opt -> epsilon
[Line 29] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 29] : unary_expression -> postfix_expression
[Line 29] : cast_expression -> unary_expression
[Line 29] : multiplicative_expression -> cast_expression
[Line 29] : additive_expression -> multiplicative_expression
[Line 29] : shift_expression -> additive_expression
[Line 29] : relational_expression -> shift_expression
[Line 29] : equality_expression -> relational_expression
[Line 29] : and_expression -> equality_expression
[Line 29] : exclusive_or_expression -> and_expression
[Line 29] : inclusive_or_expression -> exclusive_or_expression
[Line 29] : logical_and_expression -> inclusive_or_expression
[Line 29] : logical_or_expression -> logical_and_expression
[Line 29] : conditional_expression -> logical_or_expression
[Line 29] : assignment_expression -> conditional_expression
[Line 29] : expression -> assignment_expression
[Line 29] : expression_opt -> expression ;
[Line 29] : statement -> expression_statement
[Line 29] : block_item -> statement
[Line 29] : block_item_list -> block_item_list block_item

----------LINE: 30----------
[Line 30] : primary-expression: identifier[Line 30] : postfix_expression -> primary_expression
[Line 30] : primary-expression: string-literal[Line 30] : postfix_expression -> primary_expression
[Line 30] : unary_expression -> postfix_expression
[Line 30] : cast_expression -> unary_expression
[Line 30] : multiplicative_expression -> cast_expression
[Line 30] : additive_expression -> multiplicative_expression
[Line 30] : shift_expression -> additive_expression
[Line 30] : relational_expression -> shift_expression
[Line 30] : equality_expression -> relational_expression
[Line 30] : and_expression -> equality_expression
[Line 30] : exclusive_or_expression -> and_expression
[Line 30] : inclusive_or_expression -> exclusive_or_expression
[Line 30] : logical_and_expression -> inclusive_or_expression
[Line 30] : logical_or_expression -> logical_and_expression
[Line 30] : conditional_expression -> logical_or_expression
[Line 30] : assignment_expression -> conditional_expression
[Line 30] : argument_expression_list -> assignment_expression
[Line 30] : primary-expression: identifier[Line 30] : postfix_expression -> primary_expression
[Line 30] : primary-expression: identifier[Line 30] : postfix_expression -> primary_expression
[Line 30] : unary_expression -> postfix_expression
[Line 30] : cast_expression -> unary_expression
[Line 30] : multiplicative_expression -> cast_expression
[Line 30] : additive_expression -> multiplicative_expression
[Line 30] : shift_expression -> additive_expression
[Line 30] : relational_expression -> shift_expression
[Line 30] : equality_expression -> relational_expression
[Line 30] : and_expression -> equality_expression
[Line 30] : exclusive_or_expression -> and_expression
[Line 30] : inclusive_or_expression -> exclusive_or_expression
[Line 30] : logical_and_expression -> inclusive_or_expression
[Line 30] : logical_or_expression -> logical_and_expression
[Line 30] : conditional_expression -> logical_or_expression
[Line 30] : assignment_expression -> conditional_expression
[Line 30] : argument_expression_list -> assignment_expression
[Line 30] : argument_expression_list_opt -> argument_expression_list
[Line 30] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 30] : unary_expression -> postfix_expression
[Line 30] : cast_expression -> unary_expression
[Line 30] : multiplicative_expression -> cast_expression
[Line 30] : additive_expression -> multiplicative_expression
[Line 30] : shift_expression -> additive_expression
[Line 30] : relational_expression -> shift_expression
[Line 30] : equality_expression -> relational_expression
[Line 30] : and_expression -> equality_expression
[Line 30] : exclusive_or_expression -> and_expression
[Line 30] : inclusive_or_expression -> exclusive_or_expression
[Line 30] : logical_and_expression -> inclusive_or_expression
[Line 30] : logical_or_expression -> logical_and_expression
[Line 30] : conditional_expression -> logical_or_expression
[Line 30] : assignment_expression -> conditional_expression
[Line 30] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 30] : argument_expression_list_opt -> argument_expression_list
[Line 30] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 30] : unary_expression -> postfix_expression
[Line 30] : cast_expression -> unary_expression
[Line 30] : multiplicative_expression -> cast_expression
[Line 30] : additive_expression -> multiplicative_expression
[Line 30] : shift_expression -> additive_expression
[Line 30] : relational_expression -> shift_expression
[Line 30] : equality_expression -> relational_expression
[Line 30] : and_expression -> equality_expression
[Line 30] : exclusive_or_expression -> and_expression
[Line 30] : inclusive_or_expression -> exclusive_or_expression
[Line 30] : logical_and_expression -> inclusive_or_expression
[Line 30] : logical_or_expression -> logical_and_expression
[Line 30] : conditional_expression -> logical_or_expression
[Line 30] : assignment_expression -> conditional_expression
[Line 30] : expression -> assignment_expression
[Line 30] : expression_opt -> expression ;
[Line 30] : statement -> expression_statement
[Line 30] : block_item -> statement
[Line 30] : block_item_list -> block_item_list block_item

----------LINE: 31----------

----------LINE: 32----------

----------LINE: 33----------

----------LINE: 34----------
[Line 34] : type_specifier -> int
[Line 34] : declaration_specifiers_opt -> epsilon
[Line 34] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 34] : pointer_opt -> epsilon
[Line 34] : direct_declarator -> identifier
[Line 34] : type_qualifier_list_opt -> epsilon
[Line 34] : assignment_expression_opt -> epsilon
[Line 34] : direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line 34] : declarator -> pointer_opt direct_declarator
[Line 34] : designation_opt -> epsilon
[Line 34] : primary-expression: constant[Line 34] : postfix_expression -> primary_expression
[Line 34] : unary_expression -> postfix_expression
[Line 34] : cast_expression -> unary_expression
[Line 34] : multiplicative_expression -> cast_expression
[Line 34] : additive_expression -> multiplicative_expression
[Line 34] : shift_expression -> additive_expression
[Line 34] : relational_expression -> shift_expression
[Line 34] : equality_expression -> relational_expression
[Line 34] : and_expression -> equality_expression
[Line 34] : exclusive_or_expression -> and_expression
[Line 34] : inclusive_or_expression -> exclusive_or_expression
[Line 34] : logical_and_expression -> inclusive_or_expression
[Line 34] : logical_or_expression -> logical_and_expression
[Line 34] : conditional_expression -> logical_or_expression
[Line 34] : assignment_expression -> conditional_expression
[Line 34] : initializer -> assignment_expression
[Line 34] : initializer_list -> designation_opt initializer
[Line 34] : designation_opt -> epsilon
[Line 34] : primary-expression: constant[Line 34] : postfix_expression -> primary_expression
[Line 34] : unary_expression -> postfix_expression
[Line 34] : cast_expression -> unary_expression
[Line 34] : multiplicative_expression -> cast_expression
[Line 34] : additive_expression -> multiplicative_expression
[Line 34] : shift_expression -> additive_expression
[Line 34] : relational_expression -> shift_expression
[Line 34] : equality_expression -> relational_expression
[Line 34] : and_expression -> equality_expression
[Line 34] : exclusive_or_expression -> and_expression
[Line 34] : inclusive_or_expression -> exclusive_or_expression
[Line 34] : logical_and_expression -> inclusive_or_expression
[Line 34] : logical_or_expression -> logical_and_expression
[Line 34] : conditional_expression -> logical_or_expression
[Line 34] : assignment_expression -> conditional_expression
[Line 34] : initializer -> assignment_expression
[Line 34] : initializer_list -> initializer_list , designation_opt initializer
[Line 34] : designation_opt -> epsilon
[Line 34] : primary-expression: constant[Line 34] : postfix_expression -> primary_expression
[Line 34] : unary_expression -> postfix_expression
[Line 34] : cast_expression -> unary_expression
[Line 34] : multiplicative_expression -> cast_expression
[Line 34] : additive_expression -> multiplicative_expression
[Line 34] : shift_expression -> additive_expression
[Line 34] : relational_expression -> shift_expression
[Line 34] : equality_expression -> relational_expression
[Line 34] : and_expression -> equality_expression
[Line 34] : exclusive_or_expression -> and_expression
[Line 34] : inclusive_or_expression -> exclusive_or_expression
[Line 34] : logical_and_expression -> inclusive_or_expression
[Line 34] : logical_or_expression -> logical_and_expression
[Line 34] : conditional_expression -> logical_or_expression
[Line 34] : assignment_expression -> conditional_expression
[Line 34] : initializer -> assignment_expression
[Line 34] : initializer_list -> initializer_list , designation_opt initializer
[Line 34] : initializer -> { initializer_list }
[Line 34] : init_declarator -> declarator = initializer
[Line 34] : init_declarator_list -> init_declarator
[Line 34] : init_declarator_list_opt -> init_declarator_list
[Line 34] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 34] : block_item -> declaration
[Line 34] : block_item_list -> block_item_list block_item

----------LINE: 35----------
[Line 35] : type_specifier -> int
[Line 35] : declaration_specifiers_opt -> epsilon
[Line 35] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 35] : pointer_opt -> epsilon
[Line 35] : direct_declarator -> identifier
[Line 35] : type_qualifier_list_opt -> epsilon
[Line 35] : assignment_expression_opt -> epsilon
[Line 35] : direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line 35] : declarator -> pointer_opt direct_declarator
[Line 35] : designation_opt -> epsilon
[Line 35] : primary-expression: constant[Line 35] : postfix_expression -> primary_expression
[Line 35] : unary_expression -> postfix_expression
[Line 35] : cast_expression -> unary_expression
[Line 35] : multiplicative_expression -> cast_expression
[Line 35] : additive_expression -> multiplicative_expression
[Line 35] : shift_expression -> additive_expression
[Line 35] : relational_expression -> shift_expression
[Line 35] : equality_expression -> relational_expression
[Line 35] : and_expression -> equality_expression
[Line 35] : exclusive_or_expression -> and_expression
[Line 35] : inclusive_or_expression -> exclusive_or_expression
[Line 35] : logical_and_expression -> inclusive_or_expression
[Line 35] : logical_or_expression -> logical_and_expression
[Line 35] : conditional_expression -> logical_or_expression
[Line 35] : assignment_expression -> conditional_expression
[Line 35] : initializer -> assignment_expression
[Line 35] : initializer_list -> designation_opt initializer
[Line 35] : designation_opt -> epsilon
[Line 35] : primary-expression: constant[Line 35] : postfix_expression -> primary_expression
[Line 35] : unary_expression -> postfix_expression
[Line 35] : cast_expression -> unary_expression
[Line 35] : multiplicative_expression -> cast_expression
[Line 35] : additive_expression -> multiplicative_expression
[Line 35] : shift_expression -> additive_expression
[Line 35] : relational_expression -> shift_expression
[Line 35] : equality_expression -> relational_expression
[Line 35] : and_expression -> equality_expression
[Line 35] : exclusive_or_expression -> and_expression
[Line 35] : inclusive_or_expression -> exclusive_or_expression
[Line 35] : logical_and_expression -> inclusive_or_expression
[Line 35] : logical_or_expression -> logical_and_expression
[Line 35] : conditional_expression -> logical_or_expression
[Line 35] : assignment_expression -> conditional_expression
[Line 35] : initializer -> assignment_expression
[Line 35] : initializer_list -> initializer_list , designation_opt initializer
[Line 35] : designation_opt -> epsilon
[Line 35] : primary-expression: constant[Line 35] : postfix_expression -> primary_expression
[Line 35] : unary_expression -> postfix_expression
[Line 35] : cast_expression -> unary_expression
[Line 35] : multiplicative_expression -> cast_expression
[Line 35] : additive_expression -> multiplicative_expression
[Line 35] : shift_expression -> additive_expression
[Line 35] : relational_expression -> shift_expression
[Line 35] : equality_expression -> relational_expression
[Line 35] : and_expression -> equality_expression
[Line 35] : exclusive_or_expression -> and_expression
[Line 35] : inclusive_or_expression -> exclusive_or_expression
[Line 35] : logical_and_expression -> inclusive_or_expression
[Line 35] : logical_or_expression -> logical_and_expression
[Line 35] : conditional_expression -> logical_or_expression
[Line 35] : assignment_expression -> conditional_expression
[Line 35] : initializer -> assignment_expression
[Line 35] : initializer_list -> initializer_list , designation_opt initializer
[Line 35] : initializer -> { initializer_list }
[Line 35] : init_declarator -> declarator = initializer
[Line 35] : init_declarator_list -> init_declarator
[Line 35] : init_declarator_list_opt -> init_declarator_list
[Line 35] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 35] : block_item -> declaration
[Line 35] : block_item_list -> block_item_list block_item

----------LINE: 36----------
[Line 36] : type_specifier -> int
[Line 36] : declaration_specifiers_opt -> epsilon
[Line 36] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 36] : pointer_opt -> epsilon
[Line 36] : direct_declarator -> identifier
[Line 36] : declarator -> pointer_opt direct_declarator
[Line 36] : primary-expression: constant[Line 36] : postfix_expression -> primary_expression
[Line 36] : unary_expression -> postfix_expression
[Line 36] : cast_expression -> unary_expression
[Line 36] : multiplicative_expression -> cast_expression
[Line 36] : additive_expression -> multiplicative_expression
[Line 36] : shift_expression -> additive_expression
[Line 36] : relational_expression -> shift_expression
[Line 36] : equality_expression -> relational_expression
[Line 36] : and_expression -> equality_expression
[Line 36] : exclusive_or_expression -> and_expression
[Line 36] : inclusive_or_expression -> exclusive_or_expression
[Line 36] : logical_and_expression -> inclusive_or_expression
[Line 36] : logical_or_expression -> logical_and_expression
[Line 36] : conditional_expression -> logical_or_expression
[Line 36] : assignment_expression -> conditional_expression
[Line 36] : initializer -> assignment_expression
[Line 36] : init_declarator -> declarator = initializer
[Line 36] : init_declarator_list -> init_declarator
[Line 36] : init_declarator_list_opt -> init_declarator_list
[Line 36] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 36] : block_item -> declaration
[Line 36] : block_item_list -> block_item_list block_item

----------LINE: 37----------
[Line 37] : type_specifier -> int
[Line 37] : declaration_specifiers_opt -> epsilon
[Line 37] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 37] : pointer_opt -> epsilon
[Line 37] : direct_declarator -> identifier
[Line 37] : declarator -> pointer_opt direct_declarator
[Line 37] : primary-expression: identifier[Line 37] : postfix_expression -> primary_expression
[Line 37] : unary_expression -> postfix_expression
[Line 37] : cast_expression -> unary_expression
[Line 37] : multiplicative_expression -> cast_expression
[Line 37] : additive_expression -> multiplicative_expression
[Line 37] : shift_expression -> additive_expression
[Line 37] : relational_expression -> shift_expression
[Line 37] : equality_expression -> relational_expression
[Line 37] : and_expression -> equality_expression
[Line 37] : exclusive_or_expression -> and_expression
[Line 37] : inclusive_or_expression -> exclusive_or_expression
[Line 37] : logical_and_expression -> inclusive_or_expression
[Line 37] : logical_or_expression -> logical_and_expression
[Line 37] : conditional_expression -> logical_or_expression
[Line 37] : assignment_expression -> conditional_expression
[Line 37] : expression -> assignment_expression
[Line 37] : primary-expression: ( expression )[Line 37] : postfix_expression -> primary_expression
[Line 37] : unary_expression -> postfix_expression
[Line 37] : unary_expression -> sizeof unary_expression
[Line 37] : cast_expression -> unary_expression
[Line 37] : multiplicative_expression -> cast_expression
[Line 37] : primary-expression: identifier[Line 37] : postfix_expression -> primary_expression
[Line 37] : primary-expression: constant[Line 37] : postfix_expression -> primary_expression
[Line 37] : unary_expression -> postfix_expression
[Line 37] : cast_expression -> unary_expression
[Line 37] : multiplicative_expression -> cast_expression
[Line 37] : additive_expression -> multiplicative_expression
[Line 37] : shift_expression -> additive_expression
[Line 37] : relational_expression -> shift_expression
[Line 37] : equality_expression -> relational_expression
[Line 37] : and_expression -> equality_expression
[Line 37] : exclusive_or_expression -> and_expression
[Line 37] : inclusive_or_expression -> exclusive_or_expression
[Line 37] : logical_and_expression -> inclusive_or_expression
[Line 37] : logical_or_expression -> logical_and_expression
[Line 37] : conditional_expression -> logical_or_expression
[Line 37] : assignment_expression -> conditional_expression
[Line 37] : expression -> assignment_expression
[Line 37] : postfix_expression -> postfix_expression [ expression ]
[Line 37] : unary_expression -> postfix_expression
[Line 37] : cast_expression -> unary_expression
[Line 37] : multiplicative_expression -> cast_expression
[Line 37] : additive_expression -> multiplicative_expression
[Line 37] : shift_expression -> additive_expression
[Line 37] : relational_expression -> shift_expression
[Line 37] : equality_expression -> relational_expression
[Line 37] : and_expression -> equality_expression
[Line 37] : exclusive_or_expression -> and_expression
[Line 37] : inclusive_or_expression -> exclusive_or_expression
[Line 37] : logical_and_expression -> inclusive_or_expression
[Line 37] : logical_or_expression -> logical_and_expression
[Line 37] : conditional_expression -> logical_or_expression
[Line 37] : assignment_expression -> conditional_expression
[Line 37] : expression -> assignment_expression
[Line 37] : primary-expression: ( expression )[Line 37] : postfix_expression -> primary_expression
[Line 37] : unary_expression -> postfix_expression
[Line 37] : unary_expression -> sizeof unary_expression
[Line 37] : cast_expression -> unary_expression
[Line 37] : multiplicative_expression -> multiplicative_expression / cast_expression
[Line 37] : additive_expression -> multiplicative_expression
[Line 37] : shift_expression -> additive_expression
[Line 37] : relational_expression -> shift_expression
[Line 37] : equality_expression -> relational_expression
[Line 37] : and_expression -> equality_expression
[Line 37] : exclusive_or_expression -> and_expression
[Line 37] : inclusive_or_expression -> exclusive_or_expression
[Line 37] : logical_and_expression -> inclusive_or_expression
[Line 37] : logical_or_expression -> logical_and_expression
[Line 37] : conditional_expression -> logical_or_expression
[Line 37] : assignment_expression -> conditional_expression
[Line 37] : initializer -> assignment_expression
[Line 37] : init_declarator -> declarator = initializer
[Line 37] : init_declarator_list -> init_declarator
[Line 37] : init_declarator_list_opt -> init_declarator_list
[Line 37] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 37] : block_item -> declaration
[Line 37] : block_item_list -> block_item_list block_item

----------LINE: 38----------
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : primary-expression: string-literal[Line 38] : postfix_expression -> primary_expression
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> assignment_expression
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> assignment_expression
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 38] : primary-expression: identifier[Line 38] : postfix_expression -> primary_expression
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 38] : argument_expression_list_opt -> argument_expression_list
[Line 38] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 38] : argument_expression_list_opt -> argument_expression_list
[Line 38] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 38] : unary_expression -> postfix_expression
[Line 38] : cast_expression -> unary_expression
[Line 38] : multiplicative_expression -> cast_expression
[Line 38] : additive_expression -> multiplicative_expression
[Line 38] : shift_expression -> additive_expression
[Line 38] : relational_expression -> shift_expression
[Line 38] : equality_expression -> relational_expression
[Line 38] : and_expression -> equality_expression
[Line 38] : exclusive_or_expression -> and_expression
[Line 38] : inclusive_or_expression -> exclusive_or_expression
[Line 38] : logical_and_expression -> inclusive_or_expression
[Line 38] : logical_or_expression -> logical_and_expression
[Line 38] : conditional_expression -> logical_or_expression
[Line 38] : assignment_expression -> conditional_expression
[Line 38] : expression -> assignment_expression
[Line 38] : expression_opt -> expression ;
[Line 38] : statement -> expression_statement
[Line 38] : block_item -> statement
[Line 38] : block_item_list -> block_item_list block_item

----------LINE: 39----------

----------LINE: 40----------

----------LINE: 41----------
[Line 41] : type_specifier -> int
[Line 41] : declaration_specifiers_opt -> epsilon
[Line 41] : declaration_specifiers -> type_specifier declaration_specifiers_opt
[Line 41] : pointer_opt -> epsilon
[Line 41] : direct_declarator -> identifier
[Line 41] : declarator -> pointer_opt direct_declarator
[Line 41] : primary-expression: constant[Line 41] : postfix_expression -> primary_expression
[Line 41] : unary_expression -> postfix_expression
[Line 41] : cast_expression -> unary_expression
[Line 41] : multiplicative_expression -> cast_expression
[Line 41] : additive_expression -> multiplicative_expression
[Line 41] : shift_expression -> additive_expression
[Line 41] : relational_expression -> shift_expression
[Line 41] : equality_expression -> relational_expression
[Line 41] : and_expression -> equality_expression
[Line 41] : exclusive_or_expression -> and_expression
[Line 41] : inclusive_or_expression -> exclusive_or_expression
[Line 41] : logical_and_expression -> inclusive_or_expression
[Line 41] : logical_or_expression -> logical_and_expression
[Line 41] : conditional_expression -> logical_or_expression
[Line 41] : assignment_expression -> conditional_expression
[Line 41] : initializer -> assignment_expression
[Line 41] : init_declarator -> declarator = initializer
[Line 41] : init_declarator_list -> init_declarator
[Line 41] : pointer_opt -> epsilon
[Line 41] : direct_declarator -> identifier
[Line 41] : declarator -> pointer_opt direct_declarator
[Line 41] : init_declarator -> declarator
[Line 41] : init_declarator_list -> init_declarator_list , init_declarator
[Line 41] : pointer_opt -> epsilon
[Line 41] : direct_declarator -> identifier
[Line 41] : declarator -> pointer_opt direct_declarator
[Line 41] : init_declarator -> declarator
[Line 41] : init_declarator_list -> init_declarator_list , init_declarator
[Line 41] : init_declarator_list_opt -> init_declarator_list
[Line 41] : declaration -> declaration_specifiers init_declarator_list_opt ;
[Line 41] : block_item -> declaration
[Line 41] : block_item_list -> block_item_list block_item

----------LINE: 42----------
[Line 42] : primary-expression: identifier[Line 42] : postfix_expression -> primary_expression
[Line 42] : primary-expression: string-literal[Line 42] : postfix_expression -> primary_expression
[Line 42] : unary_expression -> postfix_expression
[Line 42] : cast_expression -> unary_expression
[Line 42] : multiplicative_expression -> cast_expression
[Line 42] : additive_expression -> multiplicative_expression
[Line 42] : shift_expression -> additive_expression
[Line 42] : relational_expression -> shift_expression
[Line 42] : equality_expression -> relational_expression
[Line 42] : and_expression -> equality_expression
[Line 42] : exclusive_or_expression -> and_expression
[Line 42] : inclusive_or_expression -> exclusive_or_expression
[Line 42] : logical_and_expression -> inclusive_or_expression
[Line 42] : logical_or_expression -> logical_and_expression
[Line 42] : conditional_expression -> logical_or_expression
[Line 42] : assignment_expression -> conditional_expression
[Line 42] : argument_expression_list -> assignment_expression
[Line 42] : argument_expression_list_opt -> argument_expression_list
[Line 42] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 42] : unary_expression -> postfix_expression
[Line 42] : cast_expression -> unary_expression
[Line 42] : multiplicative_expression -> cast_expression
[Line 42] : additive_expression -> multiplicative_expression
[Line 42] : shift_expression -> additive_expression
[Line 42] : relational_expression -> shift_expression
[Line 42] : equality_expression -> relational_expression
[Line 42] : and_expression -> equality_expression
[Line 42] : exclusive_or_expression -> and_expression
[Line 42] : inclusive_or_expression -> exclusive_or_expression
[Line 42] : logical_and_expression -> inclusive_or_expression
[Line 42] : logical_or_expression -> logical_and_expression
[Line 42] : conditional_expression -> logical_or_expression
[Line 42] : assignment_expression -> conditional_expression
[Line 42] : expression -> assignment_expression
[Line 42] : expression_opt -> expression ;
[Line 42] : statement -> expression_statement
[Line 42] : block_item -> statement
[Line 42] : block_item_list -> block_item_list block_item

----------LINE: 43----------
[Line 43] : primary-expression: identifier[Line 43] : postfix_expression -> primary_expression
[Line 43] : primary-expression: string-literal[Line 43] : postfix_expression -> primary_expression
[Line 43] : unary_expression -> postfix_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : multiplicative_expression -> cast_expression
[Line 43] : additive_expression -> multiplicative_expression
[Line 43] : shift_expression -> additive_expression
[Line 43] : relational_expression -> shift_expression
[Line 43] : equality_expression -> relational_expression
[Line 43] : and_expression -> equality_expression
[Line 43] : exclusive_or_expression -> and_expression
[Line 43] : inclusive_or_expression -> exclusive_or_expression
[Line 43] : logical_and_expression -> inclusive_or_expression
[Line 43] : logical_or_expression -> logical_and_expression
[Line 43] : conditional_expression -> logical_or_expression
[Line 43] : assignment_expression -> conditional_expression
[Line 43] : argument_expression_list -> assignment_expression
[Line 43] : unary_operator -> &
[Line 43] : primary-expression: identifier[Line 43] : postfix_expression -> primary_expression
[Line 43] : unary_expression -> postfix_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : unary_expression -> unary_operator cast_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : multiplicative_expression -> cast_expression
[Line 43] : additive_expression -> multiplicative_expression
[Line 43] : shift_expression -> additive_expression
[Line 43] : relational_expression -> shift_expression
[Line 43] : equality_expression -> relational_expression
[Line 43] : and_expression -> equality_expression
[Line 43] : exclusive_or_expression -> and_expression
[Line 43] : inclusive_or_expression -> exclusive_or_expression
[Line 43] : logical_and_expression -> inclusive_or_expression
[Line 43] : logical_or_expression -> logical_and_expression
[Line 43] : conditional_expression -> logical_or_expression
[Line 43] : assignment_expression -> conditional_expression
[Line 43] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 43] : unary_operator -> &
[Line 43] : primary-expression: identifier[Line 43] : postfix_expression -> primary_expression
[Line 43] : unary_expression -> postfix_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : unary_expression -> unary_operator cast_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : multiplicative_expression -> cast_expression
[Line 43] : additive_expression -> multiplicative_expression
[Line 43] : shift_expression -> additive_expression
[Line 43] : relational_expression -> shift_expression
[Line 43] : equality_expression -> relational_expression
[Line 43] : and_expression -> equality_expression
[Line 43] : exclusive_or_expression -> and_expression
[Line 43] : inclusive_or_expression -> exclusive_or_expression
[Line 43] : logical_and_expression -> inclusive_or_expression
[Line 43] : logical_or_expression -> logical_and_expression
[Line 43] : conditional_expression -> logical_or_expression
[Line 43] : assignment_expression -> conditional_expression
[Line 43] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 43] : argument_expression_list_opt -> argument_expression_list
[Line 43] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 43] : unary_expression -> postfix_expression
[Line 43] : cast_expression -> unary_expression
[Line 43] : multiplicative_expression -> cast_expression
[Line 43] : additive_expression -> multiplicative_expression
[Line 43] : shift_expression -> additive_expression
[Line 43] : relational_expression -> shift_expression
[Line 43] : equality_expression -> relational_expression
[Line 43] : and_expression -> equality_expression
[Line 43] : exclusive_or_expression -> and_expression
[Line 43] : inclusive_or_expression -> exclusive_or_expression
[Line 43] : logical_and_expression -> inclusive_or_expression
[Line 43] : logical_or_expression -> logical_and_expression
[Line 43] : conditional_expression -> logical_or_expression
[Line 43] : assignment_expression -> conditional_expression
[Line 43] : expression -> assignment_expression
[Line 43] : expression_opt -> expression ;
[Line 43] : statement -> expression_statement
[Line 43] : block_item -> statement
[Line 43] : block_item_list -> block_item_list block_item

----------LINE: 44----------
[Line 44] : primary-expression: identifier[Line 44] : postfix_expression -> primary_expression
[Line 44] : primary-expression: string-literal[Line 44] : postfix_expression -> primary_expression
[Line 44] : unary_expression -> postfix_expression
[Line 44] : cast_expression -> unary_expression
[Line 44] : multiplicative_expression -> cast_expression
[Line 44] : additive_expression -> multiplicative_expression
[Line 44] : shift_expression -> additive_expression
[Line 44] : relational_expression -> shift_expression
[Line 44] : equality_expression -> relational_expression
[Line 44] : and_expression -> equality_expression
[Line 44] : exclusive_or_expression -> and_expression
[Line 44] : inclusive_or_expression -> exclusive_or_expression
[Line 44] : logical_and_expression -> inclusive_or_expression
[Line 44] : logical_or_expression -> logical_and_expression
[Line 44] : conditional_expression -> logical_or_expression
[Line 44] : assignment_expression -> conditional_expression
[Line 44] : argument_expression_list -> assignment_expression
[Line 44] : primary-expression: identifier[Line 44] : postfix_expression -> primary_expression
[Line 44] : unary_expression -> postfix_expression
[Line 44] : cast_expression -> unary_expression
[Line 44] : multiplicative_expression -> cast_expression
[Line 44] : primary-expression: identifier[Line 44] : postfix_expression -> primary_expression
[Line 44] : unary_expression -> postfix_expression
[Line 44] : cast_expression -> unary_expression
[Line 44] : multiplicative_expression -> multiplicative_expression * cast_expression
[Line 44] : additive_expression -> multiplicative_expression
[Line 44] : shift_expression -> additive_expression
[Line 44] : relational_expression -> shift_expression
[Line 44] : equality_expression -> relational_expression
[Line 44] : and_expression -> equality_expression
[Line 44] : exclusive_or_expression -> and_expression
[Line 44] : inclusive_or_expression -> exclusive_or_expression
[Line 44] : logical_and_expression -> inclusive_or_expression
[Line 44] : logical_or_expression -> logical_and_expression
[Line 44] : conditional_expression -> logical_or_expression
[Line 44] : assignment_expression -> conditional_expression
[Line 44] : argument_expression_list -> argument_expression_list , assignment_expression
[Line 44] : argument_expression_list_opt -> argument_expression_list
[Line 44] : postfix_expression -> postfix_expression ( ]argument_expression_list_opt )
[Line 44] : unary_expression -> postfix_expression
[Line 44] : cast_expression -> unary_expression
[Line 44] : multiplicative_expression -> cast_expression
[Line 44] : additive_expression -> multiplicative_expression
[Line 44] : shift_expression -> additive_expression
[Line 44] : relational_expression -> shift_expression
[Line 44] : equality_expression -> relational_expression
[Line 44] : and_expression -> equality_expression
[Line 44] : exclusive_or_expression -> and_expression
[Line 44] : inclusive_or_expression -> exclusive_or_expression
[Line 44] : logical_and_expression -> inclusive_or_expression
[Line 44] : logical_or_expression -> logical_and_expression
[Line 44] : conditional_expression -> logical_or_expression
[Line 44] : assignment_expression -> conditional_expression
[Line 44] : expression -> assignment_expression
[Line 44] : expression_opt -> expression ;
[Line 44] : statement -> expression_statement
[Line 44] : block_item -> statement
[Line 44] : block_item_list -> block_item_list block_item

----------LINE: 45----------
[Line 45] : jump_statement -> return expression_opt ;
[Line 45] : statement -> jump_statement
[Line 45] : block_item -> statement
[Line 45] : block_item_list -> block_item_list block_item

----------LINE: 46----------
[Line 46] : compound_statement -> { block_item_list_opt }
[Line 46] : function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
[Line 46] : external_declaration -> function_definition
[Line 46] : translation_unit -> external_declaration
