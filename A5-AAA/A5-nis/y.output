Terminals which are not used

   HASH
   STRUCT
   TYPEDEF
   UNION
   UNEXPECTED_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 M: /* empty */

    2 N: /* empty */

    3 CT: /* empty */

    4 CB: /* empty */

    5 primary_expression: IDENTIFIER
    6                   | constant
    7                   | STRING_LITERAL
    8                   | PARENTHESIS_OPEN expression PARENTHESIS_CLOSE

    9 constant: INTEGER_CONST
   10         | FLOAT_CONST
   11         | CHAR_CONST

   12 postfix_expression: primary_expression
   13                   | postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | postfix_expression DOT IDENTIFIER
   16                   | postfix_expression PTR_OP IDENTIFIER
   17                   | postfix_expression INC_OP
   18                   | postfix_expression DEC_OP
   19                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE

   21 argument_expression_list_opt: argument_expression_list
   22                             | /* empty */

   23 argument_expression_list: assignment_expression
   24                         | argument_expression_list COMMA assignment_expression

   25 unary_expression: postfix_expression
   26                 | INC_OP unary_expression
   27                 | DEC_OP unary_expression
   28                 | unary_operator cast_expression
   29                 | SIZEOF unary_expression
   30                 | SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE

   31 unary_operator: BITWISEAND
   32               | STAR
   33               | PLUS
   34               | MINUS
   35               | NOT
   36               | EXCLAMATION

   37 cast_expression: unary_expression
   38                | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression

   39 multiplicative_expression: cast_expression
   40                          | multiplicative_expression STAR cast_expression
   41                          | multiplicative_expression DIVIDE cast_expression
   42                          | multiplicative_expression PERCENTAGE cast_expression

   43 additive_expression: multiplicative_expression
   44                    | additive_expression PLUS multiplicative_expression
   45                    | additive_expression MINUS multiplicative_expression

   46 shift_expression: additive_expression
   47                 | shift_expression LEFT_OP additive_expression
   48                 | shift_expression RIGHT_OP additive_expression

   49 relational_expression: shift_expression
   50                      | relational_expression LT_OP shift_expression
   51                      | relational_expression GT_OP shift_expression
   52                      | relational_expression LTE_OP shift_expression
   53                      | relational_expression GTE_OP shift_expression

   54 equality_expression: relational_expression
   55                    | equality_expression EQ_OP relational_expression
   56                    | equality_expression NE_OP relational_expression

   57 AND_expression: equality_expression
   58               | AND_expression BITWISEAND equality_expression

   59 exclusive_OR_expression: AND_expression
   60                        | exclusive_OR_expression BITWISEXOR AND_expression

   61 inclusive_OR_expression: exclusive_OR_expression
   62                        | inclusive_OR_expression BITWISEOR exclusive_OR_expression

   63 logical_AND_expression: inclusive_OR_expression
   64                       | logical_AND_expression AND_OP M inclusive_OR_expression

   65 logical_OR_expression: logical_AND_expression
   66                      | logical_OR_expression OR_OP M logical_AND_expression

   67 conditional_expression: logical_OR_expression
   68                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   69 assignment_expression: conditional_expression
   70                      | unary_expression assignment_operator assignment_expression

   71 assignment_operator: EQ
   72                    | MUL_ASSIGN
   73                    | DIV_ASSIGN
   74                    | MOD_ASSIGN
   75                    | ADD_ASSIGN
   76                    | SUB_ASSIGN
   77                    | LEFT_ASSIGN
   78                    | RIGHT_ASSIGN
   79                    | AND_ASSIGN
   80                    | XOR_ASSIGN
   81                    | OR_ASSIGN

   82 expression: assignment_expression
   83           | expression COMMA assignment_expression

   84 constant_expression: conditional_expression

   85 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   86 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   87                       | type_specifier declaration_specifiers_opt
   88                       | type_qualifier declaration_specifiers_opt
   89                       | function_specifier declaration_specifiers_opt

   90 declaration_specifiers_opt: declaration_specifiers
   91                           | /* empty */

   92 init_declarator_list: init_declarator
   93                     | init_declarator_list COMMA init_declarator

   94 init_declarator_list_opt: init_declarator_list
   95                         | /* empty */

   96 init_declarator: declarator
   97                | declarator EQ initializer

   98 storage_class_specifier: EXTERN
   99                        | STATIC
  100                        | AUTO
  101                        | REGISTER

  102 type_specifier: VOID_TYPE
  103               | CHAR_TYPE
  104               | SHORT
  105               | INT_TYPE
  106               | LONG
  107               | FLOAT_TYPE
  108               | DOUBLE
  109               | SIGNED
  110               | UNSIGNED
  111               | BOOL
  112               | COMPLEX
  113               | IMAGINARY
  114               | enum_specifier

  115 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  116                         | type_qualifier specifier_qualifier_list_opt

  117 specifier_qualifier_list_opt: specifier_qualifier_list
  118                             | /* empty */

  119 identifier_opt: IDENTIFIER
  120               | /* empty */

  121 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | ENUM IDENTIFIER

  124 enumerator_list: enumerator
  125                | enumerator_list COMMA enumerator

  126 enumerator: IDENTIFIER
  127           | IDENTIFIER EQ constant_expression

  128 type_qualifier: CONST
  129               | RESTRICT
  130               | VOLATILE

  131 function_specifier: INLINE

  132 declarator: pointer direct_declarator
  133           | direct_declarator

  134 direct_declarator: IDENTIFIER
  135                  | PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE

  148 pointer: STAR type_qualifier_list_opt
  149        | STAR type_qualifier_list_opt pointer

  150 type_qualifier_list: type_qualifier
  151                    | type_qualifier_list type_qualifier

  152 type_qualifier_list_opt: type_qualifier_list
  153                        | /* empty */

  154 parameter_type_list: parameter_list
  155                    | parameter_list COMMA ELLIPSIS

  156 parameter_list: parameter_declaration
  157               | parameter_list COMMA parameter_declaration

  158 parameter_declaration: declaration_specifiers declarator
  159                      | declaration_specifiers

  160 identifier_list: IDENTIFIER
  161                | identifier_list COMMA IDENTIFIER

  162 type_name: specifier_qualifier_list

  163 initializer: assignment_expression
  164            | CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
  165            | CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE

  166 initializer_list: designation_opt initializer
  167                 | initializer_list COMMA designation_opt initializer

  168 designation: designator_list EQ

  169 designation_opt: designation
  170                | /* empty */

  171 designator_list: designator
  172                | designator_list designator

  173 designator: SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | DOT IDENTIFIER

  175 statement: labeled_statement
  176          | compound_statement
  177          | expression_statement
  178          | selection_statement
  179          | iteration_statement
  180          | jump_statement

  181 labeled_statement: IDENTIFIER COLON statement
  182                  | CASE constant_expression COLON statement
  183                  | DEFAULT COLON statement

  184 compound_statement: CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE

  185 block_item_list: block_item
  186                | block_item_list M block_item

  187 block_item_list_opt: block_item_list
  188                    | /* empty */

  189 block_item: declaration
  190           | statement

  191 expression_statement: expression_opt SEMI_COLON

  192 expression_opt: expression
  193               | /* empty */

  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement

  197 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

  201 jump_statement: GOTO IDENTIFIER SEMI_COLON
  202               | CONTINUE SEMI_COLON
  203               | BREAK SEMI_COLON
  204               | RETURN expression_opt SEMI_COLON

  205 translation_unit: external_declaration
  206                 | translation_unit external_declaration

  207 external_declaration: function_definition
  208                     | declaration

  209 function_definition: declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

  210 declaration_list: declaration
  211                 | declaration_list declaration

  212 declaration_list_opt: declaration_list
  213                     | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
PARENTHESIS_OPEN (258) 8 14 19 20 30 38 135 145 146 147 194 195 196
    197 198 199 200
PARENTHESIS_CLOSE (259) 8 14 19 20 30 38 135 145 146 147 194 195 196
    197 198 199 200
CURLY_BRACE_OPEN (260) 19 20 121 122 164 165 184 209
CURLY_BRACE_CLOSE (261) 19 20 121 122 164 165 184 209
SQR_BRACE_OPEN (262) 13 136 137 138 139 140 141 142 143 144 173
SQR_BRACE_CLOSE (263) 13 136 137 138 139 140 141 142 143 144 173
INC_OP (264) 17 26
DEC_OP (265) 18 27
LEFT_OP (266) 47
RIGHT_OP (267) 48
EQ_OP (268) 55
NE_OP (269) 56
LTE_OP (270) 52
GTE_OP (271) 53
AND_OP (272) 64
OR_OP (273) 66
PTR_OP (274) 16
LT_OP (275) 50
GT_OP (276) 51
EQ (277) 71 97 127 168
DOT (278) 15 174
BITWISEAND (279) 31 58
BITWISEOR (280) 62
BITWISEXOR (281) 60
STAR (282) 32 40 143 144 148 149
PLUS (283) 33 44
MINUS (284) 34 45
NOT (285) 35
EXCLAMATION (286) 36
DIVIDE (287) 41
PERCENTAGE (288) 42
ADD_ASSIGN (289) 75
SUB_ASSIGN (290) 76
MUL_ASSIGN (291) 72
DIV_ASSIGN (292) 73
MOD_ASSIGN (293) 74
LEFT_ASSIGN (294) 77
RIGHT_ASSIGN (295) 78
OR_ASSIGN (296) 81
AND_ASSIGN (297) 79
XOR_ASSIGN (298) 80
COLON (299) 68 181 182 183
SEMI_COLON (300) 85 191 198 199 200 201 202 203 204
ELLIPSIS (301) 155
QUESTION_MARK (302) 68
COMMA (303) 20 24 83 93 122 125 155 157 161 165 167
HASH (304)
EXTERN (305) 98
STATIC (306) 99 140 141 142
AUTO (307) 100
REGISTER (308) 101
VOID_TYPE (309) 102
CHAR_TYPE (310) 103
SHORT (311) 104
INT_TYPE (312) 105
LONG (313) 106
FLOAT_TYPE (314) 107
DOUBLE (315) 108
SIGNED (316) 109
UNSIGNED (317) 110
BOOL (318) 111
COMPLEX (319) 112
IMAGINARY (320) 113
CONST (321) 128
RESTRICT (322) 129
VOLATILE (323) 130
ENUM (324) 121 122 123
INLINE (325) 131
SIZEOF (326) 29 30
STRUCT (327)
TYPEDEF (328)
UNION (329)
IF (330) 194 195
ELSE (331) 194
CASE (332) 182
DEFAULT (333) 183
WHILE (334) 197 198
CONTINUE (335) 202
DO (336) 198
GOTO (337) 201
FOR (338) 199 200
RETURN (339) 204
BREAK (340) 203
SWITCH (341) 196
UNEXPECTED_TOKEN (342)
IDENTIFIER (343) 5 15 16 119 123 126 127 134 160 161 174 181 201
INTEGER_CONST (344) 9
FLOAT_CONST (345) 10
CHAR_CONST (346) 11
STRING_LITERAL (347) 7
THEN (348)


Nonterminals, with rules where they appear

$accept (94)
    on left: 0
M (95)
    on left: 1, on right: 64 66 68 186 194 195 197 198 199
N (96)
    on left: 2, on right: 68 194 195 199
CT (97)
    on left: 3, on right: 145 147 184 209
CB (98)
    on left: 4, on right: 184
primary_expression (99)
    on left: 5 6 7 8, on right: 12
constant (100)
    on left: 9 10 11, on right: 6
postfix_expression (101)
    on left: 12 13 14 15 16 17 18 19 20, on right: 13 14 15 16 17 18
    25
argument_expression_list_opt (102)
    on left: 21 22, on right: 14
argument_expression_list (103)
    on left: 23 24, on right: 21 24
unary_expression (104)
    on left: 25 26 27 28 29 30, on right: 26 27 29 37 70
unary_operator (105)
    on left: 31 32 33 34 35 36, on right: 28
cast_expression (106)
    on left: 37 38, on right: 28 38 39 40 41 42
multiplicative_expression (107)
    on left: 39 40 41 42, on right: 40 41 42 43 44 45
additive_expression (108)
    on left: 43 44 45, on right: 44 45 46 47 48
shift_expression (109)
    on left: 46 47 48, on right: 47 48 49 50 51 52 53
relational_expression (110)
    on left: 49 50 51 52 53, on right: 50 51 52 53 54 55 56
equality_expression (111)
    on left: 54 55 56, on right: 55 56 57 58
AND_expression (112)
    on left: 57 58, on right: 58 59 60
exclusive_OR_expression (113)
    on left: 59 60, on right: 60 61 62
inclusive_OR_expression (114)
    on left: 61 62, on right: 62 63 64
logical_AND_expression (115)
    on left: 63 64, on right: 64 65 66
logical_OR_expression (116)
    on left: 65 66, on right: 66 67 68
conditional_expression (117)
    on left: 67 68, on right: 68 69 84
assignment_expression (118)
    on left: 69 70, on right: 23 24 70 82 83 136 138 140 141 142 163
assignment_operator (119)
    on left: 71 72 73 74 75 76 77 78 79 80 81, on right: 70
expression (120)
    on left: 82 83, on right: 8 13 68 83 192 194 195 196 197 198
constant_expression (121)
    on left: 84, on right: 127 173 182
declaration (122)
    on left: 85, on right: 189 200 208 210 211
declaration_specifiers (123)
    on left: 86 87 88 89, on right: 85 90 158 159 209
declaration_specifiers_opt (124)
    on left: 90 91, on right: 86 87 88 89
init_declarator_list (125)
    on left: 92 93, on right: 93 94
init_declarator_list_opt (126)
    on left: 94 95, on right: 85
init_declarator (127)
    on left: 96 97, on right: 92 93
storage_class_specifier (128)
    on left: 98 99 100 101, on right: 86
type_specifier (129)
    on left: 102 103 104 105 106 107 108 109 110 111 112 113 114,
    on right: 87 115
specifier_qualifier_list (130)
    on left: 115 116, on right: 117 162
specifier_qualifier_list_opt (131)
    on left: 117 118, on right: 115 116
identifier_opt (132)
    on left: 119 120, on right: 121 122
enum_specifier (133)
    on left: 121 122 123, on right: 114
enumerator_list (134)
    on left: 124 125, on right: 121 122 125
enumerator (135)
    on left: 126 127, on right: 124 125
type_qualifier (136)
    on left: 128 129 130, on right: 88 116 150 151
function_specifier (137)
    on left: 131, on right: 89
declarator (138)
    on left: 132 133, on right: 96 97 135 158 209
direct_declarator (139)
    on left: 134 135 136 137 138 139 140 141 142 143 144 145 146 147
   , on right: 132 133 136 137 138 139 140 141 142 143 144 145 146
    147
pointer (140)
    on left: 148 149, on right: 132 149
type_qualifier_list (141)
    on left: 150 151, on right: 136 137 140 142 143 151 152
type_qualifier_list_opt (142)
    on left: 152 153, on right: 148 149
parameter_type_list (143)
    on left: 154 155, on right: 145
parameter_list (144)
    on left: 156 157, on right: 154 155 157
parameter_declaration (145)
    on left: 158 159, on right: 156 157
identifier_list (146)
    on left: 160 161, on right: 146 161
type_name (147)
    on left: 162, on right: 19 20 30 38
initializer (148)
    on left: 163 164 165, on right: 97 166 167
initializer_list (149)
    on left: 166 167, on right: 19 20 164 165 167
designation (150)
    on left: 168, on right: 169
designation_opt (151)
    on left: 169 170, on right: 166 167
designator_list (152)
    on left: 171 172, on right: 168 172
designator (153)
    on left: 173 174, on right: 171 172
statement (154)
    on left: 175 176 177 178 179 180, on right: 181 182 183 190 194
    195 196 197 198 199 200
labeled_statement (155)
    on left: 181 182 183, on right: 175
compound_statement (156)
    on left: 184, on right: 176
block_item_list (157)
    on left: 185 186, on right: 186 187
block_item_list_opt (158)
    on left: 187 188, on right: 184 209
block_item (159)
    on left: 189 190, on right: 185 186
expression_statement (160)
    on left: 191, on right: 177
expression_opt (161)
    on left: 192 193, on right: 191 199 200 204
selection_statement (162)
    on left: 194 195 196, on right: 178
iteration_statement (163)
    on left: 197 198 199 200, on right: 179
jump_statement (164)
    on left: 201 202 203 204, on right: 180
translation_unit (165)
    on left: 205 206, on right: 0 206
external_declaration (166)
    on left: 207 208, on right: 205 206
function_definition (167)
    on left: 209, on right: 207
declaration_list (168)
    on left: 210 211, on right: 211 212
declaration_list_opt (169)
    on left: 212 213, on right: 209


state 0

    0 $accept: . translation_unit $end
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  205 translation_unit: . external_declaration
  206                 | . translation_unit external_declaration
  207 external_declaration: . function_definition
  208                     | . declaration
  209 function_definition: . declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


state 1

   98 storage_class_specifier: EXTERN .

    $default  reduce using rule 98 (storage_class_specifier)


state 2

   99 storage_class_specifier: STATIC .

    $default  reduce using rule 99 (storage_class_specifier)


state 3

  100 storage_class_specifier: AUTO .

    $default  reduce using rule 100 (storage_class_specifier)


state 4

  101 storage_class_specifier: REGISTER .

    $default  reduce using rule 101 (storage_class_specifier)


state 5

  102 type_specifier: VOID_TYPE .

    $default  reduce using rule 102 (type_specifier)


state 6

  103 type_specifier: CHAR_TYPE .

    $default  reduce using rule 103 (type_specifier)


state 7

  104 type_specifier: SHORT .

    $default  reduce using rule 104 (type_specifier)


state 8

  105 type_specifier: INT_TYPE .

    $default  reduce using rule 105 (type_specifier)


state 9

  106 type_specifier: LONG .

    $default  reduce using rule 106 (type_specifier)


state 10

  107 type_specifier: FLOAT_TYPE .

    $default  reduce using rule 107 (type_specifier)


state 11

  108 type_specifier: DOUBLE .

    $default  reduce using rule 108 (type_specifier)


state 12

  109 type_specifier: SIGNED .

    $default  reduce using rule 109 (type_specifier)


state 13

  110 type_specifier: UNSIGNED .

    $default  reduce using rule 110 (type_specifier)


state 14

  111 type_specifier: BOOL .

    $default  reduce using rule 111 (type_specifier)


state 15

  112 type_specifier: COMPLEX .

    $default  reduce using rule 112 (type_specifier)


state 16

  113 type_specifier: IMAGINARY .

    $default  reduce using rule 113 (type_specifier)


state 17

  128 type_qualifier: CONST .

    $default  reduce using rule 128 (type_qualifier)


state 18

  129 type_qualifier: RESTRICT .

    $default  reduce using rule 129 (type_qualifier)


state 19

  130 type_qualifier: VOLATILE .

    $default  reduce using rule 130 (type_qualifier)


state 20

  119 identifier_opt: . IDENTIFIER
  120               | .  [CURLY_BRACE_OPEN]
  121 enum_specifier: ENUM . identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | ENUM . identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | ENUM . IDENTIFIER

    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 120 (identifier_opt)

    identifier_opt  go to state 33


state 21

  131 function_specifier: INLINE .

    $default  reduce using rule 131 (function_specifier)


state 22

  208 external_declaration: declaration .

    $default  reduce using rule 208 (external_declaration)


state 23

   85 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   92 init_declarator_list: . init_declarator
   93                     | . init_declarator_list COMMA init_declarator
   94 init_declarator_list_opt: . init_declarator_list
   95                         | .  [SEMI_COLON]
   96 init_declarator: . declarator
   97                | . declarator EQ initializer
  132 declarator: . pointer direct_declarator
  133           | . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer
  209 function_definition: declaration_specifiers . declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 95 (init_declarator_list_opt)

    init_declarator_list      go to state 37
    init_declarator_list_opt  go to state 38
    init_declarator           go to state 39
    declarator                go to state 40
    direct_declarator         go to state 41
    pointer                   go to state 42


state 24

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | storage_class_specifier . declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   90 declaration_specifiers_opt: . declaration_specifiers
   91                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    $default  reduce using rule 91 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 25

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   87                       | type_specifier . declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   90 declaration_specifiers_opt: . declaration_specifiers
   91                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    $default  reduce using rule 91 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 26

  114 type_specifier: enum_specifier .

    $default  reduce using rule 114 (type_specifier)


state 27

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   88                       | type_qualifier . declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   90 declaration_specifiers_opt: . declaration_specifiers
   91                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    $default  reduce using rule 91 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 28

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   89                       | function_specifier . declaration_specifiers_opt
   90 declaration_specifiers_opt: . declaration_specifiers
   91                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    $default  reduce using rule 91 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 47
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 29

    0 $accept: translation_unit . $end
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  206 translation_unit: translation_unit . external_declaration
  207 external_declaration: . function_definition
  208                     | . declaration
  209 function_definition: . declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    $end        shift, and go to state 48
    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 49
    function_definition      go to state 31


state 30

  205 translation_unit: external_declaration .

    $default  reduce using rule 205 (translation_unit)


state 31

  207 external_declaration: function_definition .

    $default  reduce using rule 207 (external_declaration)


state 32

  119 identifier_opt: IDENTIFIER .  [CURLY_BRACE_OPEN]
  123 enum_specifier: ENUM IDENTIFIER .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, IDENTIFIER]

    CURLY_BRACE_OPEN  reduce using rule 119 (identifier_opt)
    $default          reduce using rule 123 (enum_specifier)


state 33

  121 enum_specifier: ENUM identifier_opt . CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | ENUM identifier_opt . CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 50


state 34

  132 declarator: . pointer direct_declarator
  133           | . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  135                  | PARENTHESIS_OPEN . declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    declarator         go to state 51
    direct_declarator  go to state 41
    pointer            go to state 42


state 35

  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  148 pointer: STAR . type_qualifier_list_opt
  149        | STAR . type_qualifier_list_opt pointer
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier
  152 type_qualifier_list_opt: . type_qualifier_list
  153                        | .  [PARENTHESIS_OPEN, STAR, IDENTIFIER]

    CONST     shift, and go to state 17
    RESTRICT  shift, and go to state 18
    VOLATILE  shift, and go to state 19

    $default  reduce using rule 153 (type_qualifier_list_opt)

    type_qualifier           go to state 52
    type_qualifier_list      go to state 53
    type_qualifier_list_opt  go to state 54


state 36

  134 direct_declarator: IDENTIFIER .

    $default  reduce using rule 134 (direct_declarator)


state 37

   93 init_declarator_list: init_declarator_list . COMMA init_declarator
   94 init_declarator_list_opt: init_declarator_list .  [SEMI_COLON]

    COMMA  shift, and go to state 55

    $default  reduce using rule 94 (init_declarator_list_opt)


state 38

   85 declaration: declaration_specifiers init_declarator_list_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 56


state 39

   92 init_declarator_list: init_declarator .

    $default  reduce using rule 92 (init_declarator_list)


state 40

   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   96 init_declarator: declarator .  [SEMI_COLON, COMMA]
   97                | declarator . EQ initializer
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  209 function_definition: declaration_specifiers declarator . declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE
  210 declaration_list: . declaration
  211                 | . declaration_list declaration
  212 declaration_list_opt: . declaration_list
  213                     | .  [CURLY_BRACE_OPEN]

    EQ          shift, and go to state 57
    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    CURLY_BRACE_OPEN  reduce using rule 213 (declaration_list_opt)
    $default          reduce using rule 96 (init_declarator)

    declaration              go to state 58
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list         go to state 60
    declaration_list_opt     go to state 61


state 41

  133 declarator: direct_declarator .  [PARENTHESIS_CLOSE, CURLY_BRACE_OPEN, EQ, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  136 direct_declarator: direct_declarator . SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | direct_declarator . SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator . SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | direct_declarator . SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator . SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | direct_declarator . SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | direct_declarator . PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | direct_declarator . PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | direct_declarator . PARENTHESIS_OPEN CT PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 62
    SQR_BRACE_OPEN    shift, and go to state 63

    $default  reduce using rule 133 (declarator)


state 42

  132 declarator: pointer . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 34
    IDENTIFIER        shift, and go to state 36

    direct_declarator  go to state 64


state 43

   90 declaration_specifiers_opt: declaration_specifiers .

    $default  reduce using rule 90 (declaration_specifiers_opt)


state 44

   86 declaration_specifiers: storage_class_specifier declaration_specifiers_opt .

    $default  reduce using rule 86 (declaration_specifiers)


state 45

   87 declaration_specifiers: type_specifier declaration_specifiers_opt .

    $default  reduce using rule 87 (declaration_specifiers)


state 46

   88 declaration_specifiers: type_qualifier declaration_specifiers_opt .

    $default  reduce using rule 88 (declaration_specifiers)


state 47

   89 declaration_specifiers: function_specifier declaration_specifiers_opt .

    $default  reduce using rule 89 (declaration_specifiers)


state 48

    0 $accept: translation_unit $end .

    $default  accept


state 49

  206 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 206 (translation_unit)


state 50

  121 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN . enumerator_list CURLY_BRACE_CLOSE
  122               | ENUM identifier_opt CURLY_BRACE_OPEN . enumerator_list COMMA CURLY_BRACE_CLOSE
  124 enumerator_list: . enumerator
  125                | . enumerator_list COMMA enumerator
  126 enumerator: . IDENTIFIER
  127           | . IDENTIFIER EQ constant_expression

    IDENTIFIER  shift, and go to state 65

    enumerator_list  go to state 66
    enumerator       go to state 67


state 51

  135 direct_declarator: PARENTHESIS_OPEN declarator . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 68


state 52

  150 type_qualifier_list: type_qualifier .

    $default  reduce using rule 150 (type_qualifier_list)


state 53

  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  151 type_qualifier_list: type_qualifier_list . type_qualifier
  152 type_qualifier_list_opt: type_qualifier_list .  [PARENTHESIS_OPEN, STAR, IDENTIFIER]

    CONST     shift, and go to state 17
    RESTRICT  shift, and go to state 18
    VOLATILE  shift, and go to state 19

    $default  reduce using rule 152 (type_qualifier_list_opt)

    type_qualifier  go to state 69


state 54

  148 pointer: . STAR type_qualifier_list_opt  [PARENTHESIS_OPEN, IDENTIFIER]
  148        | STAR type_qualifier_list_opt .  [PARENTHESIS_OPEN, IDENTIFIER]
  149        | . STAR type_qualifier_list_opt pointer
  149        | STAR type_qualifier_list_opt . pointer

    STAR  shift, and go to state 35

    $default  reduce using rule 148 (pointer)

    pointer  go to state 70


state 55

   93 init_declarator_list: init_declarator_list COMMA . init_declarator
   96 init_declarator: . declarator
   97                | . declarator EQ initializer
  132 declarator: . pointer direct_declarator
  133           | . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    init_declarator    go to state 71
    declarator         go to state 72
    direct_declarator  go to state 41
    pointer            go to state 42


state 56

   85 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON .

    $default  reduce using rule 85 (declaration)


state 57

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   97 init_declarator: declarator EQ . initializer
  163 initializer: . assignment_expression
  164            | . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
  165            | . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 107


state 58

  210 declaration_list: declaration .

    $default  reduce using rule 210 (declaration_list)


state 59

   85 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   92 init_declarator_list: . init_declarator
   93                     | . init_declarator_list COMMA init_declarator
   94 init_declarator_list_opt: . init_declarator_list
   95                         | .  [SEMI_COLON]
   96 init_declarator: . declarator
   97                | . declarator EQ initializer
  132 declarator: . pointer direct_declarator
  133           | . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 95 (init_declarator_list_opt)

    init_declarator_list      go to state 37
    init_declarator_list_opt  go to state 38
    init_declarator           go to state 39
    declarator                go to state 72
    direct_declarator         go to state 41
    pointer                   go to state 42


state 60

   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  211 declaration_list: declaration_list . declaration
  212 declaration_list_opt: declaration_list .  [CURLY_BRACE_OPEN]

    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    $default  reduce using rule 212 (declaration_list_opt)

    declaration              go to state 108
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


state 61

    3 CT: .
  209 function_definition: declaration_specifiers declarator declaration_list_opt . CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 3 (CT)

    CT  go to state 109


state 62

    3 CT: .  [PARENTHESIS_CLOSE, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  145 direct_declarator: direct_declarator PARENTHESIS_OPEN . CT parameter_type_list PARENTHESIS_CLOSE
  146                  | direct_declarator PARENTHESIS_OPEN . identifier_list PARENTHESIS_CLOSE
  147                  | direct_declarator PARENTHESIS_OPEN . CT PARENTHESIS_CLOSE
  160 identifier_list: . IDENTIFIER
  161                | . identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 110

    $default  reduce using rule 3 (CT)

    CT               go to state 111
    identifier_list  go to state 112


state 63

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  136 direct_declarator: direct_declarator SQR_BRACE_OPEN . type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list SQR_BRACE_CLOSE
  138                  | direct_declarator SQR_BRACE_OPEN . assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator SQR_BRACE_OPEN . SQR_BRACE_CLOSE
  140                  | direct_declarator SQR_BRACE_OPEN . STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN . STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | direct_declarator SQR_BRACE_OPEN . STAR SQR_BRACE_CLOSE
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    SQR_BRACE_CLOSE   shift, and go to state 113
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 114
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    STATIC            shift, and go to state 115
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 116
    type_qualifier             go to state 52
    type_qualifier_list        go to state 117


state 64

  132 declarator: pointer direct_declarator .  [PARENTHESIS_CLOSE, CURLY_BRACE_OPEN, EQ, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  136 direct_declarator: direct_declarator . SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | direct_declarator . SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator . SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | direct_declarator . SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator . SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | direct_declarator . SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | direct_declarator . PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | direct_declarator . PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | direct_declarator . PARENTHESIS_OPEN CT PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 62
    SQR_BRACE_OPEN    shift, and go to state 63

    $default  reduce using rule 132 (declarator)


state 65

  126 enumerator: IDENTIFIER .  [CURLY_BRACE_CLOSE, COMMA]
  127           | IDENTIFIER . EQ constant_expression

    EQ  shift, and go to state 118

    $default  reduce using rule 126 (enumerator)


state 66

  121 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list . CURLY_BRACE_CLOSE
  122               | ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list . COMMA CURLY_BRACE_CLOSE
  125 enumerator_list: enumerator_list . COMMA enumerator

    CURLY_BRACE_CLOSE  shift, and go to state 119
    COMMA              shift, and go to state 120


state 67

  124 enumerator_list: enumerator .

    $default  reduce using rule 124 (enumerator_list)


state 68

  135 direct_declarator: PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE .

    $default  reduce using rule 135 (direct_declarator)


state 69

  151 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 151 (type_qualifier_list)


state 70

  149 pointer: STAR type_qualifier_list_opt pointer .

    $default  reduce using rule 149 (pointer)


state 71

   93 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 93 (init_declarator_list)


state 72

   96 init_declarator: declarator .  [SEMI_COLON, COMMA]
   97                | declarator . EQ initializer

    EQ  shift, and go to state 57

    $default  reduce using rule 96 (init_declarator)


state 73

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    8                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   19                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   38                | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  115 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  116                         | . type_qualifier specifier_qualifier_list_opt
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  162 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 26
    type_qualifier             go to state 125
    type_name                  go to state 126


state 74

  164 initializer: CURLY_BRACE_OPEN . initializer_list CURLY_BRACE_CLOSE
  165            | CURLY_BRACE_OPEN . initializer_list COMMA CURLY_BRACE_CLOSE
  166 initializer_list: . designation_opt initializer
  167                 | . initializer_list COMMA designation_opt initializer
  168 designation: . designator_list EQ
  169 designation_opt: . designation
  170                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  171 designator_list: . designator
  172                | . designator_list designator
  173 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 127
    DOT             shift, and go to state 128

    $default  reduce using rule 170 (designation_opt)

    initializer_list  go to state 129
    designation       go to state 130
    designation_opt   go to state 131
    designator_list   go to state 132
    designator        go to state 133


state 75

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   26                 | INC_OP . unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 134
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 135
    unary_operator      go to state 93


state 76

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   27                 | DEC_OP . unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 134
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 136
    unary_operator      go to state 93


state 77

   31 unary_operator: BITWISEAND .

    $default  reduce using rule 31 (unary_operator)


state 78

   32 unary_operator: STAR .

    $default  reduce using rule 32 (unary_operator)


state 79

   33 unary_operator: PLUS .

    $default  reduce using rule 33 (unary_operator)


state 80

   34 unary_operator: MINUS .

    $default  reduce using rule 34 (unary_operator)


state 81

   35 unary_operator: NOT .

    $default  reduce using rule 35 (unary_operator)


state 82

   36 unary_operator: EXCLAMATION .

    $default  reduce using rule 36 (unary_operator)


state 83

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   29                 | SIZEOF . unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   30                 | SIZEOF . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 137
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 138
    unary_operator      go to state 93


state 84

    5 primary_expression: IDENTIFIER .

    $default  reduce using rule 5 (primary_expression)


state 85

    9 constant: INTEGER_CONST .

    $default  reduce using rule 9 (constant)


state 86

   10 constant: FLOAT_CONST .

    $default  reduce using rule 10 (constant)


state 87

   11 constant: CHAR_CONST .

    $default  reduce using rule 11 (constant)


state 88

    7 primary_expression: STRING_LITERAL .

    $default  reduce using rule 7 (primary_expression)


state 89

   12 postfix_expression: primary_expression .

    $default  reduce using rule 12 (postfix_expression)


state 90

    6 primary_expression: constant .

    $default  reduce using rule 6 (primary_expression)


state 91

   13 postfix_expression: postfix_expression . SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | postfix_expression . PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | postfix_expression . DOT IDENTIFIER
   16                   | postfix_expression . PTR_OP IDENTIFIER
   17                   | postfix_expression . INC_OP
   18                   | postfix_expression . DEC_OP
   25 unary_expression: postfix_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, EQ, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PARENTHESIS_OPEN  shift, and go to state 139
    SQR_BRACE_OPEN    shift, and go to state 140
    INC_OP            shift, and go to state 141
    DEC_OP            shift, and go to state 142
    PTR_OP            shift, and go to state 143
    DOT               shift, and go to state 144

    $default  reduce using rule 25 (unary_expression)


state 92

   37 cast_expression: unary_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, COLON, SEMI_COLON, QUESTION_MARK, COMMA]
   70 assignment_expression: unary_expression . assignment_operator assignment_expression
   71 assignment_operator: . EQ
   72                    | . MUL_ASSIGN
   73                    | . DIV_ASSIGN
   74                    | . MOD_ASSIGN
   75                    | . ADD_ASSIGN
   76                    | . SUB_ASSIGN
   77                    | . LEFT_ASSIGN
   78                    | . RIGHT_ASSIGN
   79                    | . AND_ASSIGN
   80                    | . XOR_ASSIGN
   81                    | . OR_ASSIGN

    EQ            shift, and go to state 145
    ADD_ASSIGN    shift, and go to state 146
    SUB_ASSIGN    shift, and go to state 147
    MUL_ASSIGN    shift, and go to state 148
    DIV_ASSIGN    shift, and go to state 149
    MOD_ASSIGN    shift, and go to state 150
    LEFT_ASSIGN   shift, and go to state 151
    RIGHT_ASSIGN  shift, and go to state 152
    OR_ASSIGN     shift, and go to state 153
    AND_ASSIGN    shift, and go to state 154
    XOR_ASSIGN    shift, and go to state 155

    $default  reduce using rule 37 (cast_expression)

    assignment_operator  go to state 156


state 93

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   28                 | unary_operator . cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 158


state 94

   39 multiplicative_expression: cast_expression .

    $default  reduce using rule 39 (multiplicative_expression)


state 95

   40 multiplicative_expression: multiplicative_expression . STAR cast_expression
   41                          | multiplicative_expression . DIVIDE cast_expression
   42                          | multiplicative_expression . PERCENTAGE cast_expression
   43 additive_expression: multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 159
    DIVIDE      shift, and go to state 160
    PERCENTAGE  shift, and go to state 161

    $default  reduce using rule 43 (additive_expression)


state 96

   44 additive_expression: additive_expression . PLUS multiplicative_expression
   45                    | additive_expression . MINUS multiplicative_expression
   46 shift_expression: additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 46 (shift_expression)


state 97

   47 shift_expression: shift_expression . LEFT_OP additive_expression
   48                 | shift_expression . RIGHT_OP additive_expression
   49 relational_expression: shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 164
    RIGHT_OP  shift, and go to state 165

    $default  reduce using rule 49 (relational_expression)


state 98

   50 relational_expression: relational_expression . LT_OP shift_expression
   51                      | relational_expression . GT_OP shift_expression
   52                      | relational_expression . LTE_OP shift_expression
   53                      | relational_expression . GTE_OP shift_expression
   54 equality_expression: relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 166
    GTE_OP  shift, and go to state 167
    LT_OP   shift, and go to state 168
    GT_OP   shift, and go to state 169

    $default  reduce using rule 54 (equality_expression)


state 99

   55 equality_expression: equality_expression . EQ_OP relational_expression
   56                    | equality_expression . NE_OP relational_expression
   57 AND_expression: equality_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    EQ_OP  shift, and go to state 170
    NE_OP  shift, and go to state 171

    $default  reduce using rule 57 (AND_expression)


state 100

   58 AND_expression: AND_expression . BITWISEAND equality_expression
   59 exclusive_OR_expression: AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEAND  shift, and go to state 172

    $default  reduce using rule 59 (exclusive_OR_expression)


state 101

   60 exclusive_OR_expression: exclusive_OR_expression . BITWISEXOR AND_expression
   61 inclusive_OR_expression: exclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEXOR  shift, and go to state 173

    $default  reduce using rule 61 (inclusive_OR_expression)


state 102

   62 inclusive_OR_expression: inclusive_OR_expression . BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: inclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEOR  shift, and go to state 174

    $default  reduce using rule 63 (logical_AND_expression)


state 103

   64 logical_AND_expression: logical_AND_expression . AND_OP M inclusive_OR_expression
   65 logical_OR_expression: logical_AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    AND_OP  shift, and go to state 175

    $default  reduce using rule 65 (logical_OR_expression)


state 104

    2 N: .  [QUESTION_MARK]
   66 logical_OR_expression: logical_OR_expression . OR_OP M logical_AND_expression
   67 conditional_expression: logical_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, COLON, SEMI_COLON, COMMA]
   68                       | logical_OR_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    OR_OP  shift, and go to state 176

    QUESTION_MARK  reduce using rule 2 (N)
    $default       reduce using rule 67 (conditional_expression)

    N  go to state 177


state 105

   69 assignment_expression: conditional_expression .

    $default  reduce using rule 69 (assignment_expression)


state 106

  163 initializer: assignment_expression .

    $default  reduce using rule 163 (initializer)


state 107

   97 init_declarator: declarator EQ initializer .

    $default  reduce using rule 97 (init_declarator)


state 108

  211 declaration_list: declaration_list declaration .

    $default  reduce using rule 211 (declaration_list)


state 109

  209 function_definition: declaration_specifiers declarator declaration_list_opt CT . CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 178


state 110

  160 identifier_list: IDENTIFIER .

    $default  reduce using rule 160 (identifier_list)


state 111

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  145 direct_declarator: direct_declarator PARENTHESIS_OPEN CT . parameter_type_list PARENTHESIS_CLOSE
  147                  | direct_declarator PARENTHESIS_OPEN CT . PARENTHESIS_CLOSE
  154 parameter_type_list: . parameter_list
  155                    | . parameter_list COMMA ELLIPSIS
  156 parameter_list: . parameter_declaration
  157               | . parameter_list COMMA parameter_declaration
  158 parameter_declaration: . declaration_specifiers declarator
  159                      | . declaration_specifiers

    PARENTHESIS_CLOSE  shift, and go to state 179
    EXTERN             shift, and go to state 1
    STATIC             shift, and go to state 2
    AUTO               shift, and go to state 3
    REGISTER           shift, and go to state 4
    VOID_TYPE          shift, and go to state 5
    CHAR_TYPE          shift, and go to state 6
    SHORT              shift, and go to state 7
    INT_TYPE           shift, and go to state 8
    LONG               shift, and go to state 9
    FLOAT_TYPE         shift, and go to state 10
    DOUBLE             shift, and go to state 11
    SIGNED             shift, and go to state 12
    UNSIGNED           shift, and go to state 13
    BOOL               shift, and go to state 14
    COMPLEX            shift, and go to state 15
    IMAGINARY          shift, and go to state 16
    CONST              shift, and go to state 17
    RESTRICT           shift, and go to state 18
    VOLATILE           shift, and go to state 19
    ENUM               shift, and go to state 20
    INLINE             shift, and go to state 21

    declaration_specifiers   go to state 180
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 181
    parameter_list           go to state 182
    parameter_declaration    go to state 183


state 112

  146 direct_declarator: direct_declarator PARENTHESIS_OPEN identifier_list . PARENTHESIS_CLOSE
  161 identifier_list: identifier_list . COMMA IDENTIFIER

    PARENTHESIS_CLOSE  shift, and go to state 184
    COMMA              shift, and go to state 185


state 113

  139 direct_declarator: direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE .

    $default  reduce using rule 139 (direct_declarator)


state 114

   32 unary_operator: STAR .  [PARENTHESIS_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  144 direct_declarator: direct_declarator SQR_BRACE_OPEN STAR . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 186

    $default  reduce using rule 32 (unary_operator)


state 115

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  140 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC . type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN STATIC . assignment_expression SQR_BRACE_CLOSE
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 187
    type_qualifier             go to state 52
    type_qualifier_list        go to state 188


state 116

  138 direct_declarator: direct_declarator SQR_BRACE_OPEN assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 189


state 117

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  136 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list . assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . SQR_BRACE_CLOSE
  142                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . STAR SQR_BRACE_CLOSE
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    SQR_BRACE_CLOSE   shift, and go to state 190
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 191
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    STATIC            shift, and go to state 192
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 193
    type_qualifier             go to state 69


state 118

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   84 constant_expression: . conditional_expression
  127 enumerator: IDENTIFIER EQ . constant_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 195


state 119

  121 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 121 (enum_specifier)


state 120

  122 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA . CURLY_BRACE_CLOSE
  125 enumerator_list: enumerator_list COMMA . enumerator
  126 enumerator: . IDENTIFIER
  127           | . IDENTIFIER EQ constant_expression

    CURLY_BRACE_CLOSE  shift, and go to state 196
    IDENTIFIER         shift, and go to state 65

    enumerator  go to state 197


state 121

   82 expression: assignment_expression .

    $default  reduce using rule 82 (expression)


state 122

    8 primary_expression: PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE
   83 expression: expression . COMMA assignment_expression

    PARENTHESIS_CLOSE  shift, and go to state 198
    COMMA              shift, and go to state 199


state 123

  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  115 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  115                         | type_specifier . specifier_qualifier_list_opt
  116                         | . type_qualifier specifier_qualifier_list_opt
  117 specifier_qualifier_list_opt: . specifier_qualifier_list
  118                             | .  [PARENTHESIS_CLOSE]
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE

    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20

    $default  reduce using rule 118 (specifier_qualifier_list_opt)

    type_specifier                go to state 123
    specifier_qualifier_list      go to state 200
    specifier_qualifier_list_opt  go to state 201
    enum_specifier                go to state 26
    type_qualifier                go to state 125


state 124

  162 type_name: specifier_qualifier_list .

    $default  reduce using rule 162 (type_name)


state 125

  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  115 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  116                         | . type_qualifier specifier_qualifier_list_opt
  116                         | type_qualifier . specifier_qualifier_list_opt
  117 specifier_qualifier_list_opt: . specifier_qualifier_list
  118                             | .  [PARENTHESIS_CLOSE]
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE

    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20

    $default  reduce using rule 118 (specifier_qualifier_list_opt)

    type_specifier                go to state 123
    specifier_qualifier_list      go to state 200
    specifier_qualifier_list_opt  go to state 202
    enum_specifier                go to state 26
    type_qualifier                go to state 125


state 126

   19 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   38 cast_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE cast_expression

    PARENTHESIS_CLOSE  shift, and go to state 203


state 127

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   84 constant_expression: . conditional_expression
  173 designator: SQR_BRACE_OPEN . constant_expression SQR_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 204


state 128

  174 designator: DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 205


state 129

  164 initializer: CURLY_BRACE_OPEN initializer_list . CURLY_BRACE_CLOSE
  165            | CURLY_BRACE_OPEN initializer_list . COMMA CURLY_BRACE_CLOSE
  167 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACE_CLOSE  shift, and go to state 206
    COMMA              shift, and go to state 207


state 130

  169 designation_opt: designation .

    $default  reduce using rule 169 (designation_opt)


state 131

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  163 initializer: . assignment_expression
  164            | . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
  165            | . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
  166 initializer_list: designation_opt . initializer

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 208


state 132

  168 designation: designator_list . EQ
  172 designator_list: designator_list . designator
  173 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 127
    EQ              shift, and go to state 209
    DOT             shift, and go to state 128

    designator  go to state 210


state 133

  171 designator_list: designator .

    $default  reduce using rule 171 (designator_list)


state 134

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    8                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   19                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  115 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  116                         | . type_qualifier specifier_qualifier_list_opt
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  162 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 26
    type_qualifier             go to state 125
    type_name                  go to state 211


state 135

   26 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 26 (unary_expression)


state 136

   27 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 27 (unary_expression)


state 137

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    8                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   19                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   30                 | SIZEOF PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  115 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  116                         | . type_qualifier specifier_qualifier_list_opt
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  162 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 26
    type_qualifier             go to state 125
    type_name                  go to state 212


state 138

   29 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 29 (unary_expression)


state 139

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   14                   | postfix_expression PARENTHESIS_OPEN . argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   21 argument_expression_list_opt: . argument_expression_list
   22                             | .  [PARENTHESIS_CLOSE]
   23 argument_expression_list: . assignment_expression
   24                         | . argument_expression_list COMMA assignment_expression
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 22 (argument_expression_list_opt)

    primary_expression            go to state 89
    constant                      go to state 90
    postfix_expression            go to state 91
    argument_expression_list_opt  go to state 213
    argument_expression_list      go to state 214
    unary_expression              go to state 92
    unary_operator                go to state 93
    cast_expression               go to state 94
    multiplicative_expression     go to state 95
    additive_expression           go to state 96
    shift_expression              go to state 97
    relational_expression         go to state 98
    equality_expression           go to state 99
    AND_expression                go to state 100
    exclusive_OR_expression       go to state 101
    inclusive_OR_expression       go to state 102
    logical_AND_expression        go to state 103
    logical_OR_expression         go to state 104
    conditional_expression        go to state 105
    assignment_expression         go to state 215


state 140

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   13                   | postfix_expression SQR_BRACE_OPEN . expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 216


state 141

   17 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 17 (postfix_expression)


state 142

   18 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 18 (postfix_expression)


state 143

   16 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 217


state 144

   15 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 218


state 145

   71 assignment_operator: EQ .

    $default  reduce using rule 71 (assignment_operator)


state 146

   75 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 75 (assignment_operator)


state 147

   76 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 76 (assignment_operator)


state 148

   72 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 72 (assignment_operator)


state 149

   73 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 73 (assignment_operator)


state 150

   74 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 74 (assignment_operator)


state 151

   77 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 77 (assignment_operator)


state 152

   78 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 78 (assignment_operator)


state 153

   81 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 81 (assignment_operator)


state 154

   79 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 79 (assignment_operator)


state 155

   80 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 80 (assignment_operator)


state 156

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   70                      | unary_expression assignment_operator . assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 219


state 157

   37 cast_expression: unary_expression .

    $default  reduce using rule 37 (cast_expression)


state 158

   28 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 28 (unary_expression)


state 159

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   40 multiplicative_expression: multiplicative_expression STAR . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 220


state 160

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   41 multiplicative_expression: multiplicative_expression DIVIDE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 221


state 161

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   42 multiplicative_expression: multiplicative_expression PERCENTAGE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 222


state 162

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   44 additive_expression: additive_expression PLUS . multiplicative_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 223


state 163

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   45 additive_expression: additive_expression MINUS . multiplicative_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 224


state 164

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   47 shift_expression: shift_expression LEFT_OP . additive_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 225


state 165

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   48 shift_expression: shift_expression RIGHT_OP . additive_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 226


state 166

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   52 relational_expression: relational_expression LTE_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 227


state 167

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   53 relational_expression: relational_expression GTE_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 228


state 168

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   50 relational_expression: relational_expression LT_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 229


state 169

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   51 relational_expression: relational_expression GT_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 230


state 170

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   55 equality_expression: equality_expression EQ_OP . relational_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 231


state 171

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   56 equality_expression: equality_expression NE_OP . relational_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 232


state 172

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   58 AND_expression: AND_expression BITWISEAND . equality_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 233


state 173

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   60 exclusive_OR_expression: exclusive_OR_expression BITWISEXOR . AND_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 234


state 174

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   62 inclusive_OR_expression: inclusive_OR_expression BITWISEOR . exclusive_OR_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 235


state 175

    1 M: .
   64 logical_AND_expression: logical_AND_expression AND_OP . M inclusive_OR_expression

    $default  reduce using rule 1 (M)

    M  go to state 236


state 176

    1 M: .
   66 logical_OR_expression: logical_OR_expression OR_OP . M logical_AND_expression

    $default  reduce using rule 1 (M)

    M  go to state 237


state 177

   68 conditional_expression: logical_OR_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 238


state 178

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  185 block_item_list: . block_item
  186                | . block_item_list M block_item
  187 block_item_list_opt: . block_item_list
  188                    | .  [CURLY_BRACE_CLOSE]
  189 block_item: . declaration
  190           | . statement
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON
  209 function_definition: declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN . block_item_list_opt CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    SEMI_COLON  reduce using rule 193 (expression_opt)
    $default    reduce using rule 188 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    declaration                go to state 253
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 254
    labeled_statement          go to state 255
    compound_statement         go to state 256
    block_item_list            go to state 257
    block_item_list_opt        go to state 258
    block_item                 go to state 259
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 179

  147 direct_declarator: direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE .

    $default  reduce using rule 147 (direct_declarator)


state 180

  132 declarator: . pointer direct_declarator
  133           | . direct_declarator
  134 direct_declarator: . IDENTIFIER
  135                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  143                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  144                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE
  146                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  147                  | . direct_declarator PARENTHESIS_OPEN CT PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer
  158 parameter_declaration: declaration_specifiers . declarator
  159                      | declaration_specifiers .  [PARENTHESIS_CLOSE, COMMA]

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 159 (parameter_declaration)

    declarator         go to state 265
    direct_declarator  go to state 41
    pointer            go to state 42


state 181

  145 direct_declarator: direct_declarator PARENTHESIS_OPEN CT parameter_type_list . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 266


state 182

  154 parameter_type_list: parameter_list .  [PARENTHESIS_CLOSE]
  155                    | parameter_list . COMMA ELLIPSIS
  157 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 267

    $default  reduce using rule 154 (parameter_type_list)


state 183

  156 parameter_list: parameter_declaration .

    $default  reduce using rule 156 (parameter_list)


state 184

  146 direct_declarator: direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE .

    $default  reduce using rule 146 (direct_declarator)


state 185

  161 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 268


state 186

  144 direct_declarator: direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE .

    $default  reduce using rule 144 (direct_declarator)


state 187

  141 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 269


state 188

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  140 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list . assignment_expression SQR_BRACE_CLOSE
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 270
    type_qualifier             go to state 69


state 189

  138 direct_declarator: direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 138 (direct_declarator)


state 190

  137 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE .

    $default  reduce using rule 137 (direct_declarator)


state 191

   32 unary_operator: STAR .  [PARENTHESIS_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  143 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 271

    $default  reduce using rule 32 (unary_operator)


state 192

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  142 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC . assignment_expression SQR_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 272


state 193

  136 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 273


state 194

   84 constant_expression: conditional_expression .

    $default  reduce using rule 84 (constant_expression)


state 195

  127 enumerator: IDENTIFIER EQ constant_expression .

    $default  reduce using rule 127 (enumerator)


state 196

  122 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 122 (enum_specifier)


state 197

  125 enumerator_list: enumerator_list COMMA enumerator .

    $default  reduce using rule 125 (enumerator_list)


state 198

    8 primary_expression: PARENTHESIS_OPEN expression PARENTHESIS_CLOSE .

    $default  reduce using rule 8 (primary_expression)


state 199

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   83 expression: expression COMMA . assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 274


state 200

  117 specifier_qualifier_list_opt: specifier_qualifier_list .

    $default  reduce using rule 117 (specifier_qualifier_list_opt)


state 201

  115 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt .

    $default  reduce using rule 115 (specifier_qualifier_list)


state 202

  116 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt .

    $default  reduce using rule 116 (specifier_qualifier_list)


state 203

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   19                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   38                | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 275
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 276


state 204

  173 designator: SQR_BRACE_OPEN constant_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 277


state 205

  174 designator: DOT IDENTIFIER .

    $default  reduce using rule 174 (designator)


state 206

  164 initializer: CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 164 (initializer)


state 207

  165 initializer: CURLY_BRACE_OPEN initializer_list COMMA . CURLY_BRACE_CLOSE
  167 initializer_list: initializer_list COMMA . designation_opt initializer
  168 designation: . designator_list EQ
  169 designation_opt: . designation
  170                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  171 designator_list: . designator
  172                | . designator_list designator
  173 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | . DOT IDENTIFIER

    CURLY_BRACE_CLOSE  shift, and go to state 278
    SQR_BRACE_OPEN     shift, and go to state 127
    DOT                shift, and go to state 128

    $default  reduce using rule 170 (designation_opt)

    designation      go to state 130
    designation_opt  go to state 279
    designator_list  go to state 132
    designator       go to state 133


state 208

  166 initializer_list: designation_opt initializer .

    $default  reduce using rule 166 (initializer_list)


state 209

  168 designation: designator_list EQ .

    $default  reduce using rule 168 (designation)


state 210

  172 designator_list: designator_list designator .

    $default  reduce using rule 172 (designator_list)


state 211

   19 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 280


state 212

   19 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   30 unary_expression: SIZEOF PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 281


state 213

   14 postfix_expression: postfix_expression PARENTHESIS_OPEN argument_expression_list_opt . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 282


state 214

   21 argument_expression_list_opt: argument_expression_list .  [PARENTHESIS_CLOSE]
   24 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 283

    $default  reduce using rule 21 (argument_expression_list_opt)


state 215

   23 argument_expression_list: assignment_expression .

    $default  reduce using rule 23 (argument_expression_list)


state 216

   13 postfix_expression: postfix_expression SQR_BRACE_OPEN expression . SQR_BRACE_CLOSE
   83 expression: expression . COMMA assignment_expression

    SQR_BRACE_CLOSE  shift, and go to state 284
    COMMA            shift, and go to state 199


state 217

   16 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 16 (postfix_expression)


state 218

   15 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 15 (postfix_expression)


state 219

   70 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 70 (assignment_expression)


state 220

   40 multiplicative_expression: multiplicative_expression STAR cast_expression .

    $default  reduce using rule 40 (multiplicative_expression)


state 221

   41 multiplicative_expression: multiplicative_expression DIVIDE cast_expression .

    $default  reduce using rule 41 (multiplicative_expression)


state 222

   42 multiplicative_expression: multiplicative_expression PERCENTAGE cast_expression .

    $default  reduce using rule 42 (multiplicative_expression)


state 223

   40 multiplicative_expression: multiplicative_expression . STAR cast_expression
   41                          | multiplicative_expression . DIVIDE cast_expression
   42                          | multiplicative_expression . PERCENTAGE cast_expression
   44 additive_expression: additive_expression PLUS multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 159
    DIVIDE      shift, and go to state 160
    PERCENTAGE  shift, and go to state 161

    $default  reduce using rule 44 (additive_expression)


state 224

   40 multiplicative_expression: multiplicative_expression . STAR cast_expression
   41                          | multiplicative_expression . DIVIDE cast_expression
   42                          | multiplicative_expression . PERCENTAGE cast_expression
   45 additive_expression: additive_expression MINUS multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 159
    DIVIDE      shift, and go to state 160
    PERCENTAGE  shift, and go to state 161

    $default  reduce using rule 45 (additive_expression)


state 225

   44 additive_expression: additive_expression . PLUS multiplicative_expression
   45                    | additive_expression . MINUS multiplicative_expression
   47 shift_expression: shift_expression LEFT_OP additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 47 (shift_expression)


state 226

   44 additive_expression: additive_expression . PLUS multiplicative_expression
   45                    | additive_expression . MINUS multiplicative_expression
   48 shift_expression: shift_expression RIGHT_OP additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 48 (shift_expression)


state 227

   47 shift_expression: shift_expression . LEFT_OP additive_expression
   48                 | shift_expression . RIGHT_OP additive_expression
   52 relational_expression: relational_expression LTE_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 164
    RIGHT_OP  shift, and go to state 165

    $default  reduce using rule 52 (relational_expression)


state 228

   47 shift_expression: shift_expression . LEFT_OP additive_expression
   48                 | shift_expression . RIGHT_OP additive_expression
   53 relational_expression: relational_expression GTE_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 164
    RIGHT_OP  shift, and go to state 165

    $default  reduce using rule 53 (relational_expression)


state 229

   47 shift_expression: shift_expression . LEFT_OP additive_expression
   48                 | shift_expression . RIGHT_OP additive_expression
   50 relational_expression: relational_expression LT_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 164
    RIGHT_OP  shift, and go to state 165

    $default  reduce using rule 50 (relational_expression)


state 230

   47 shift_expression: shift_expression . LEFT_OP additive_expression
   48                 | shift_expression . RIGHT_OP additive_expression
   51 relational_expression: relational_expression GT_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 164
    RIGHT_OP  shift, and go to state 165

    $default  reduce using rule 51 (relational_expression)


state 231

   50 relational_expression: relational_expression . LT_OP shift_expression
   51                      | relational_expression . GT_OP shift_expression
   52                      | relational_expression . LTE_OP shift_expression
   53                      | relational_expression . GTE_OP shift_expression
   55 equality_expression: equality_expression EQ_OP relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 166
    GTE_OP  shift, and go to state 167
    LT_OP   shift, and go to state 168
    GT_OP   shift, and go to state 169

    $default  reduce using rule 55 (equality_expression)


state 232

   50 relational_expression: relational_expression . LT_OP shift_expression
   51                      | relational_expression . GT_OP shift_expression
   52                      | relational_expression . LTE_OP shift_expression
   53                      | relational_expression . GTE_OP shift_expression
   56 equality_expression: equality_expression NE_OP relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 166
    GTE_OP  shift, and go to state 167
    LT_OP   shift, and go to state 168
    GT_OP   shift, and go to state 169

    $default  reduce using rule 56 (equality_expression)


state 233

   55 equality_expression: equality_expression . EQ_OP relational_expression
   56                    | equality_expression . NE_OP relational_expression
   58 AND_expression: AND_expression BITWISEAND equality_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    EQ_OP  shift, and go to state 170
    NE_OP  shift, and go to state 171

    $default  reduce using rule 58 (AND_expression)


state 234

   58 AND_expression: AND_expression . BITWISEAND equality_expression
   60 exclusive_OR_expression: exclusive_OR_expression BITWISEXOR AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEAND  shift, and go to state 172

    $default  reduce using rule 60 (exclusive_OR_expression)


state 235

   60 exclusive_OR_expression: exclusive_OR_expression . BITWISEXOR AND_expression
   62 inclusive_OR_expression: inclusive_OR_expression BITWISEOR exclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEXOR  shift, and go to state 173

    $default  reduce using rule 62 (inclusive_OR_expression)


state 236

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   64 logical_AND_expression: logical_AND_expression AND_OP M . inclusive_OR_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 285


state 237

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   66 logical_OR_expression: logical_OR_expression OR_OP M . logical_AND_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 286


state 238

    1 M: .
   68 conditional_expression: logical_OR_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 1 (M)

    M  go to state 287


state 239

    4 CB: .
  184 compound_statement: CURLY_BRACE_OPEN . CB CT block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 4 (CB)

    CB  go to state 288


state 240

  194 selection_statement: IF . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | IF . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N

    PARENTHESIS_OPEN  shift, and go to state 289


state 241

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   84 constant_expression: . conditional_expression
  182 labeled_statement: CASE . constant_expression COLON statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 290


state 242

  183 labeled_statement: DEFAULT . COLON statement

    COLON  shift, and go to state 291


state 243

    1 M: .
  197 iteration_statement: WHILE . M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement

    $default  reduce using rule 1 (M)

    M  go to state 292


state 244

  202 jump_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 293


state 245

    1 M: .
  198 iteration_statement: DO . M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    $default  reduce using rule 1 (M)

    M  go to state 294


state 246

  201 jump_statement: GOTO . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 295


state 247

  199 iteration_statement: FOR . PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | FOR . PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 296


state 248

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  204 jump_statement: RETURN . expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    expression_opt             go to state 297


state 249

  203 jump_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 298


state 250

  196 selection_statement: SWITCH . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 299


state 251

    5 primary_expression: IDENTIFIER .  [PARENTHESIS_OPEN, SQR_BRACE_OPEN, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, PTR_OP, LT_OP, GT_OP, EQ, DOT, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, SEMI_COLON, QUESTION_MARK, COMMA]
  181 labeled_statement: IDENTIFIER . COLON statement

    COLON  shift, and go to state 300

    $default  reduce using rule 5 (primary_expression)


state 252

   83 expression: expression . COMMA assignment_expression
  192 expression_opt: expression .  [PARENTHESIS_CLOSE, SEMI_COLON]

    COMMA  shift, and go to state 199

    $default  reduce using rule 192 (expression_opt)


state 253

  189 block_item: declaration .

    $default  reduce using rule 189 (block_item)


state 254

  190 block_item: statement .

    $default  reduce using rule 190 (block_item)


state 255

  175 statement: labeled_statement .

    $default  reduce using rule 175 (statement)


state 256

  176 statement: compound_statement .

    $default  reduce using rule 176 (statement)


state 257

    1 M: .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SEMI_COLON, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, SIZEOF, IF, CASE, DEFAULT, WHILE, CONTINUE, DO, GOTO, FOR, RETURN, BREAK, SWITCH, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  186 block_item_list: block_item_list . M block_item
  187 block_item_list_opt: block_item_list .  [CURLY_BRACE_CLOSE]

    CURLY_BRACE_CLOSE  reduce using rule 187 (block_item_list_opt)
    $default           reduce using rule 1 (M)

    M  go to state 301


state 258

  209 function_definition: declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt . CURLY_BRACE_CLOSE

    CURLY_BRACE_CLOSE  shift, and go to state 302


state 259

  185 block_item_list: block_item .

    $default  reduce using rule 185 (block_item_list)


state 260

  177 statement: expression_statement .

    $default  reduce using rule 177 (statement)


state 261

  191 expression_statement: expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 303


state 262

  178 statement: selection_statement .

    $default  reduce using rule 178 (statement)


state 263

  179 statement: iteration_statement .

    $default  reduce using rule 179 (statement)


state 264

  180 statement: jump_statement .

    $default  reduce using rule 180 (statement)


state 265

  158 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 158 (parameter_declaration)


state 266

  145 direct_declarator: direct_declarator PARENTHESIS_OPEN CT parameter_type_list PARENTHESIS_CLOSE .

    $default  reduce using rule 145 (direct_declarator)


state 267

   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  155 parameter_type_list: parameter_list COMMA . ELLIPSIS
  157 parameter_list: parameter_list COMMA . parameter_declaration
  158 parameter_declaration: . declaration_specifiers declarator
  159                      | . declaration_specifiers

    ELLIPSIS    shift, and go to state 304
    EXTERN      shift, and go to state 1
    STATIC      shift, and go to state 2
    AUTO        shift, and go to state 3
    REGISTER    shift, and go to state 4
    VOID_TYPE   shift, and go to state 5
    CHAR_TYPE   shift, and go to state 6
    SHORT       shift, and go to state 7
    INT_TYPE    shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_TYPE  shift, and go to state 10
    DOUBLE      shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    BOOL        shift, and go to state 14
    COMPLEX     shift, and go to state 15
    IMAGINARY   shift, and go to state 16
    CONST       shift, and go to state 17
    RESTRICT    shift, and go to state 18
    VOLATILE    shift, and go to state 19
    ENUM        shift, and go to state 20
    INLINE      shift, and go to state 21

    declaration_specifiers   go to state 180
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 305


state 268

  161 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 161 (identifier_list)


state 269

  141 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 141 (direct_declarator)


state 270

  140 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 306


state 271

  143 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE .

    $default  reduce using rule 143 (direct_declarator)


state 272

  142 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 307


state 273

  136 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 136 (direct_declarator)


state 274

   83 expression: expression COMMA assignment_expression .

    $default  reduce using rule 83 (expression)


state 275

   19 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN . initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN . initializer_list COMMA CURLY_BRACE_CLOSE
  166 initializer_list: . designation_opt initializer
  167                 | . initializer_list COMMA designation_opt initializer
  168 designation: . designator_list EQ
  169 designation_opt: . designation
  170                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  171 designator_list: . designator
  172                | . designator_list designator
  173 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 127
    DOT             shift, and go to state 128

    $default  reduce using rule 170 (designation_opt)

    initializer_list  go to state 308
    designation       go to state 130
    designation_opt   go to state 131
    designator_list   go to state 132
    designator        go to state 133


state 276

   38 cast_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression .

    $default  reduce using rule 38 (cast_expression)


state 277

  173 designator: SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 173 (designator)


state 278

  165 initializer: CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 165 (initializer)


state 279

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
  163 initializer: . assignment_expression
  164            | . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
  165            | . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
  167 initializer_list: initializer_list COMMA designation_opt . initializer

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 309


state 280

   19 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 275


state 281

   19 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   30 unary_expression: SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, EQ, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    CURLY_BRACE_OPEN  shift, and go to state 275

    $default  reduce using rule 30 (unary_expression)


state 282

   14 postfix_expression: postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE .

    $default  reduce using rule 14 (postfix_expression)


state 283

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   24 argument_expression_list: argument_expression_list COMMA . assignment_expression
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 310


state 284

   13 postfix_expression: postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE .

    $default  reduce using rule 13 (postfix_expression)


state 285

   62 inclusive_OR_expression: inclusive_OR_expression . BITWISEOR exclusive_OR_expression
   64 logical_AND_expression: logical_AND_expression AND_OP M inclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEOR  shift, and go to state 174

    $default  reduce using rule 64 (logical_AND_expression)


state 286

   64 logical_AND_expression: logical_AND_expression . AND_OP M inclusive_OR_expression
   66 logical_OR_expression: logical_OR_expression OR_OP M logical_AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    AND_OP  shift, and go to state 175

    $default  reduce using rule 66 (logical_OR_expression)


state 287

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   68                       | logical_OR_expression N QUESTION_MARK M . expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 311


state 288

    3 CT: .
  184 compound_statement: CURLY_BRACE_OPEN CB . CT block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 3 (CT)

    CT  go to state 312


state 289

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  194 selection_statement: IF PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | IF PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement N

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 313


state 290

  182 labeled_statement: CASE constant_expression . COLON statement

    COLON  shift, and go to state 314


state 291

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  183                  | DEFAULT COLON . statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 315
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 292

  197 iteration_statement: WHILE M . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 316


state 293

  202 jump_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 202 (jump_statement)


state 294

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | DO M . statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 317
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 295

  201 jump_statement: GOTO IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 318


state 296

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  199 iteration_statement: FOR PARENTHESIS_OPEN . expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | FOR PARENTHESIS_OPEN . declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    declaration                go to state 319
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    expression_opt             go to state 320


state 297

  204 jump_statement: RETURN expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 321


state 298

  203 jump_statement: BREAK SEMI_COLON .

    $default  reduce using rule 203 (jump_statement)


state 299

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  196 selection_statement: SWITCH PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 322


state 300

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  181                  | IDENTIFIER COLON . statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 323
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 301

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  186 block_item_list: block_item_list M . block_item
  189 block_item: . declaration
  190           | . statement
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    declaration                go to state 253
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 254
    labeled_statement          go to state 255
    compound_statement         go to state 256
    block_item                 go to state 324
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 302

  209 function_definition: declaration_specifiers declarator declaration_list_opt CT CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE .

    $default  reduce using rule 209 (function_definition)


state 303

  191 expression_statement: expression_opt SEMI_COLON .

    $default  reduce using rule 191 (expression_statement)


state 304

  155 parameter_type_list: parameter_list COMMA ELLIPSIS .

    $default  reduce using rule 155 (parameter_type_list)


state 305

  157 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 157 (parameter_list)


state 306

  140 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 140 (direct_declarator)


state 307

  142 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 142 (direct_declarator)


state 308

   19 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list . CURLY_BRACE_CLOSE
   20                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list . COMMA CURLY_BRACE_CLOSE
  167 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACE_CLOSE  shift, and go to state 325
    COMMA              shift, and go to state 326


state 309

  167 initializer_list: initializer_list COMMA designation_opt initializer .

    $default  reduce using rule 167 (initializer_list)


state 310

   24 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 24 (argument_expression_list)


state 311

    2 N: .  [COLON]
   68 conditional_expression: logical_OR_expression N QUESTION_MARK M expression . N COLON M conditional_expression
   83 expression: expression . COMMA assignment_expression

    COMMA  shift, and go to state 199

    $default  reduce using rule 2 (N)

    N  go to state 327


state 312

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
   85 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   86 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   87                       | . type_specifier declaration_specifiers_opt
   88                       | . type_qualifier declaration_specifiers_opt
   89                       | . function_specifier declaration_specifiers_opt
   98 storage_class_specifier: . EXTERN
   99                        | . STATIC
  100                        | . AUTO
  101                        | . REGISTER
  102 type_specifier: . VOID_TYPE
  103               | . CHAR_TYPE
  104               | . SHORT
  105               | . INT_TYPE
  106               | . LONG
  107               | . FLOAT_TYPE
  108               | . DOUBLE
  109               | . SIGNED
  110               | . UNSIGNED
  111               | . BOOL
  112               | . COMPLEX
  113               | . IMAGINARY
  114               | . enum_specifier
  121 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  122               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . RESTRICT
  130               | . VOLATILE
  131 function_specifier: . INLINE
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  184                   | CURLY_BRACE_OPEN CB CT . block_item_list_opt CURLY_BRACE_CLOSE
  185 block_item_list: . block_item
  186                | . block_item_list M block_item
  187 block_item_list_opt: . block_item_list
  188                    | .  [CURLY_BRACE_CLOSE]
  189 block_item: . declaration
  190           | . statement
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOID_TYPE         shift, and go to state 5
    CHAR_TYPE         shift, and go to state 6
    SHORT             shift, and go to state 7
    INT_TYPE          shift, and go to state 8
    LONG              shift, and go to state 9
    FLOAT_TYPE        shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    SEMI_COLON  reduce using rule 193 (expression_opt)
    $default    reduce using rule 188 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    declaration                go to state 253
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 254
    labeled_statement          go to state 255
    compound_statement         go to state 256
    block_item_list            go to state 257
    block_item_list_opt        go to state 328
    block_item                 go to state 259
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 313

   83 expression: expression . COMMA assignment_expression
  194 selection_statement: IF PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | IF PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement N

    PARENTHESIS_CLOSE  shift, and go to state 329
    COMMA              shift, and go to state 199


state 314

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  182                  | CASE constant_expression COLON . statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 330
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 315

  183 labeled_statement: DEFAULT COLON statement .

    $default  reduce using rule 183 (labeled_statement)


state 316

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  197 iteration_statement: WHILE M PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 331


state 317

    1 M: .
  198 iteration_statement: DO M statement . M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    $default  reduce using rule 1 (M)

    M  go to state 332


state 318

  201 jump_statement: GOTO IDENTIFIER SEMI_COLON .

    $default  reduce using rule 201 (jump_statement)


state 319

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  200 iteration_statement: FOR PARENTHESIS_OPEN declaration . expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    expression_opt             go to state 333


state 320

  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt . SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    SEMI_COLON  shift, and go to state 334


state 321

  204 jump_statement: RETURN expression_opt SEMI_COLON .

    $default  reduce using rule 204 (jump_statement)


state 322

   83 expression: expression . COMMA assignment_expression
  196 selection_statement: SWITCH PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE statement

    PARENTHESIS_CLOSE  shift, and go to state 335
    COMMA              shift, and go to state 199


state 323

  181 labeled_statement: IDENTIFIER COLON statement .

    $default  reduce using rule 181 (labeled_statement)


state 324

  186 block_item_list: block_item_list M block_item .

    $default  reduce using rule 186 (block_item_list)


state 325

   19 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 19 (postfix_expression)


state 326

   20 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA . CURLY_BRACE_CLOSE
  167 initializer_list: initializer_list COMMA . designation_opt initializer
  168 designation: . designator_list EQ
  169 designation_opt: . designation
  170                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  171 designator_list: . designator
  172                | . designator_list designator
  173 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  174           | . DOT IDENTIFIER

    CURLY_BRACE_CLOSE  shift, and go to state 336
    SQR_BRACE_OPEN     shift, and go to state 127
    DOT                shift, and go to state 128

    $default  reduce using rule 170 (designation_opt)

    designation      go to state 130
    designation_opt  go to state 279
    designator_list  go to state 132
    designator       go to state 133


state 327

   68 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 337


state 328

  184 compound_statement: CURLY_BRACE_OPEN CB CT block_item_list_opt . CURLY_BRACE_CLOSE

    CURLY_BRACE_CLOSE  shift, and go to state 338


state 329

    1 M: .
  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement N ELSE M statement
  195                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement N

    $default  reduce using rule 1 (M)

    M  go to state 339


state 330

  182 labeled_statement: CASE constant_expression COLON statement .

    $default  reduce using rule 182 (labeled_statement)


state 331

   83 expression: expression . COMMA assignment_expression
  197 iteration_statement: WHILE M PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement

    PARENTHESIS_CLOSE  shift, and go to state 340
    COMMA              shift, and go to state 199


state 332

  198 iteration_statement: DO M statement M . WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    WHILE  shift, and go to state 341


state 333

  200 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt . SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    SEMI_COLON  shift, and go to state 342


state 334

    1 M: .
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON . M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 1 (M)

    M  go to state 343


state 335

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196                    | SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 344
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 336

   20 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 20 (postfix_expression)


state 337

    1 M: .
   68 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 1 (M)

    M  go to state 345


state 338

  184 compound_statement: CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE .

    $default  reduce using rule 184 (compound_statement)


state 339

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  195                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 346
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 340

    1 M: .
  197 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement

    $default  reduce using rule 1 (M)

    M  go to state 347


state 341

  198 iteration_statement: DO M statement M WHILE . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 348


state 342

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  192 expression_opt: . expression
  193               | .  [PARENTHESIS_CLOSE]
  200 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON . expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    expression_opt             go to state 349


state 343

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M . expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    expression_opt             go to state 350


state 344

  196 selection_statement: SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement .

    $default  reduce using rule 196 (selection_statement)


state 345

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   68                       | logical_OR_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 351


state 346

    2 N: .
  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement . N ELSE M statement
  195                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement . N

    $default  reduce using rule 2 (N)

    N  go to state 352


state 347

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 353
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 348

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  198 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 354


state 349

  200 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt . PARENTHESIS_CLOSE statement

    PARENTHESIS_CLOSE  shift, and go to state 355


state 350

  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt . SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    SEMI_COLON  shift, and go to state 356


state 351

   68 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 68 (conditional_expression)


state 352

  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N . ELSE M statement
  195                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, CURLY_BRACE_CLOSE, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SEMI_COLON, EXTERN, STATIC, AUTO, REGISTER, VOID_TYPE, CHAR_TYPE, SHORT, INT_TYPE, LONG, FLOAT_TYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, SIZEOF, IF, CASE, DEFAULT, WHILE, CONTINUE, DO, GOTO, FOR, RETURN, BREAK, SWITCH, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]

    ELSE  shift, and go to state 357

    $default  reduce using rule 195 (selection_statement)

    Conflict between rule 195 and token ELSE resolved as shift (%right ELSE).


state 353

  197 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement .

    $default  reduce using rule 197 (iteration_statement)


state 354

   83 expression: expression . COMMA assignment_expression
  198 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_CLOSE  shift, and go to state 358
    COMMA              shift, and go to state 199


state 355

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200                    | FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE . statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 359
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 356

    1 M: .
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON . M expression_opt N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 1 (M)

    M  go to state 360


state 357

    1 M: .
  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE . M statement

    $default  reduce using rule 1 (M)

    M  go to state 361


state 358

  198 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . SEMI_COLON

    SEMI_COLON  shift, and go to state 362


state 359

  200 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement .

    $default  reduce using rule 200 (iteration_statement)


state 360

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  192 expression_opt: . expression
  193               | .  [PARENTHESIS_CLOSE]
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M . expression_opt N PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    expression_opt             go to state 363


state 361

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M . statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 364
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 362

  198 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON .

    $default  reduce using rule 198 (iteration_statement)


state 363

    2 N: .
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt . N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 2 (N)

    N  go to state 365


state 364

  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement .

    $default  reduce using rule 194 (selection_statement)


state 365

  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N . PARENTHESIS_CLOSE M statement

    PARENTHESIS_CLOSE  shift, and go to state 366


state 366

    1 M: .
  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE . M statement

    $default  reduce using rule 1 (M)

    M  go to state 367


state 367

    5 primary_expression: . IDENTIFIER
    6                   | . constant
    7                   | . STRING_LITERAL
    8                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    9 constant: . INTEGER_CONST
   10         | . FLOAT_CONST
   11         | . CHAR_CONST
   12 postfix_expression: . primary_expression
   13                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
   14                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   15                   | . postfix_expression DOT IDENTIFIER
   16                   | . postfix_expression PTR_OP IDENTIFIER
   17                   | . postfix_expression INC_OP
   18                   | . postfix_expression DEC_OP
   19                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list CURLY_BRACE_CLOSE
   20                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initializer_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: . postfix_expression
   26                 | . INC_OP unary_expression
   27                 | . DEC_OP unary_expression
   28                 | . unary_operator cast_expression
   29                 | . SIZEOF unary_expression
   30                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   31 unary_operator: . BITWISEAND
   32               | . STAR
   33               | . PLUS
   34               | . MINUS
   35               | . NOT
   36               | . EXCLAMATION
   37 cast_expression: . unary_expression
   38                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   39 multiplicative_expression: . cast_expression
   40                          | . multiplicative_expression STAR cast_expression
   41                          | . multiplicative_expression DIVIDE cast_expression
   42                          | . multiplicative_expression PERCENTAGE cast_expression
   43 additive_expression: . multiplicative_expression
   44                    | . additive_expression PLUS multiplicative_expression
   45                    | . additive_expression MINUS multiplicative_expression
   46 shift_expression: . additive_expression
   47                 | . shift_expression LEFT_OP additive_expression
   48                 | . shift_expression RIGHT_OP additive_expression
   49 relational_expression: . shift_expression
   50                      | . relational_expression LT_OP shift_expression
   51                      | . relational_expression GT_OP shift_expression
   52                      | . relational_expression LTE_OP shift_expression
   53                      | . relational_expression GTE_OP shift_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 AND_expression: . equality_expression
   58               | . AND_expression BITWISEAND equality_expression
   59 exclusive_OR_expression: . AND_expression
   60                        | . exclusive_OR_expression BITWISEXOR AND_expression
   61 inclusive_OR_expression: . exclusive_OR_expression
   62                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   63 logical_AND_expression: . inclusive_OR_expression
   64                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   65 logical_OR_expression: . logical_AND_expression
   66                      | . logical_OR_expression OR_OP M logical_AND_expression
   67 conditional_expression: . logical_OR_expression
   68                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   69 assignment_expression: . conditional_expression
   70                      | . unary_expression assignment_operator assignment_expression
   82 expression: . assignment_expression
   83           | . expression COMMA assignment_expression
  175 statement: . labeled_statement
  176          | . compound_statement
  177          | . expression_statement
  178          | . selection_statement
  179          | . iteration_statement
  180          | . jump_statement
  181 labeled_statement: . IDENTIFIER COLON statement
  182                  | . CASE constant_expression COLON statement
  183                  | . DEFAULT COLON statement
  184 compound_statement: . CURLY_BRACE_OPEN CB CT block_item_list_opt CURLY_BRACE_CLOSE
  191 expression_statement: . expression_opt SEMI_COLON
  192 expression_opt: . expression
  193               | .  [SEMI_COLON]
  194 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  196                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  197 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  198                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  199                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M . statement
  200                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  201 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  202               | . CONTINUE SEMI_COLON
  203               | . BREAK SEMI_COLON
  204               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 239
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 240
    CASE              shift, and go to state 241
    DEFAULT           shift, and go to state 242
    WHILE             shift, and go to state 243
    CONTINUE          shift, and go to state 244
    DO                shift, and go to state 245
    GOTO              shift, and go to state 246
    FOR               shift, and go to state 247
    RETURN            shift, and go to state 248
    BREAK             shift, and go to state 249
    SWITCH            shift, and go to state 250
    IDENTIFIER        shift, and go to state 251
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 193 (expression_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 121
    expression                 go to state 252
    statement                  go to state 368
    labeled_statement          go to state 255
    compound_statement         go to state 256
    expression_statement       go to state 260
    expression_opt             go to state 261
    selection_statement        go to state 262
    iteration_statement        go to state 263
    jump_statement             go to state 264


state 368

  199 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement .

    $default  reduce using rule 199 (iteration_statement)
