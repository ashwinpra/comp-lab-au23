Terminals which are not used

   HASH
   STRUCT
   TYPEDEF
   UNION
   UNEXPECTED_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONST
    3                   | FLOAT_CONST
    4                   | CHAR_CONST
    5                   | STRING_LITERAL
    6                   | PARENTHESIS_OPEN expression PARENTHESIS_CLOSE

    7 postfix_expression: primary_expression
    8                   | postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | postfix_expression DOT IDENTIFIER
   11                   | postfix_expression PTR_OP IDENTIFIER
   12                   | postfix_expression INC_OP
   13                   | postfix_expression DEC_OP
   14                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE

   16 argument_expression_list_opt: argument_expression_list
   17                             | /* empty */

   18 argument_expression_list: assignment_expression
   19                         | argument_expression_list COMMA assignment_expression

   20 unary_expression: postfix_expression
   21                 | INC_OP unary_expression
   22                 | DEC_OP unary_expression
   23                 | unary_operator cast_expression
   24                 | SIZEOF unary_expression
   25                 | SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE

   26 unary_operator: BITWISEAND
   27               | STAR
   28               | PLUS
   29               | MINUS
   30               | NOT
   31               | EXCLAMATION

   32 cast_expression: unary_expression
   33                | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression

   34 multiplicative_expression: cast_expression
   35                          | multiplicative_expression STAR cast_expression
   36                          | multiplicative_expression DIVIDE cast_expression
   37                          | multiplicative_expression PERCENTAGE cast_expression

   38 additive_expression: multiplicative_expression
   39                    | additive_expression PLUS multiplicative_expression
   40                    | additive_expression MINUS multiplicative_expression

   41 shift_expression: additive_expression
   42                 | shift_expression LEFT_OP additive_expression
   43                 | shift_expression RIGHT_OP additive_expression

   44 relational_expression: shift_expression
   45                      | relational_expression LT_OP shift_expression
   46                      | relational_expression GT_OP shift_expression
   47                      | relational_expression LTE_OP shift_expression
   48                      | relational_expression GTE_OP shift_expression

   49 equality_expression: relational_expression
   50                    | equality_expression EQ_OP relational_expression
   51                    | equality_expression NE_OP relational_expression

   52 AND_expression: equality_expression
   53               | AND_expression BITWISEAND equality_expression

   54 exclusive_OR_expression: AND_expression
   55                        | exclusive_OR_expression BITWISEXOR AND_expression

   56 inclusive_OR_expression: exclusive_OR_expression
   57                        | inclusive_OR_expression BITWISEOR exclusive_OR_expression

   58 M: /* empty */

   59 N: /* empty */

   60 logical_AND_expression: inclusive_OR_expression
   61                       | logical_AND_expression AND_OP M inclusive_OR_expression

   62 logical_OR_expression: logical_AND_expression
   63                      | logical_OR_expression OR_OP M logical_AND_expression

   64 conditional_expression: logical_OR_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   66 assignment_expression: conditional_expression
   67                      | unary_expression assignment_operator assignment_expression

   68 assignment_operator: EQ
   69                    | MUL_ASSIGN
   70                    | DIV_ASSIGN
   71                    | MOD_ASSIGN
   72                    | ADD_ASSIGN
   73                    | SUB_ASSIGN
   74                    | LEFT_ASSIGN
   75                    | RIGHT_ASSIGN
   76                    | AND_ASSIGN
   77                    | XOR_ASSIGN
   78                    | OR_ASSIGN

   79 expression: assignment_expression
   80           | expression COMMA assignment_expression

   81 constant_expression: conditional_expression

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   83 init_declarator_list_opt: init_declarator_list
   84                         | /* empty */

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   86                       | type_specifier declaration_specifiers_opt
   87                       | type_qualifier declaration_specifiers_opt
   88                       | function_specifier declaration_specifiers_opt

   89 declaration_specifiers_opt: declaration_specifiers
   90                           | /* empty */

   91 init_declarator_list: init_declarator
   92                     | init_declarator_list COMMA init_declarator

   93 init_declarator: declarator
   94                | declarator EQ initialiser

   95 storage_class_specifier: EXTERN
   96                        | STATIC
   97                        | AUTO
   98                        | REGISTER

   99 type_specifier: VOIDTYPE
  100               | CHARTYPE
  101               | SHORT
  102               | INTTYPE
  103               | LONG
  104               | FLOATTYPE
  105               | DOUBLE
  106               | SIGNED
  107               | UNSIGNED
  108               | BOOL
  109               | COMPLEX
  110               | IMAGINARY
  111               | enum_specifier

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  113                         | type_qualifier specifier_qualifier_list_opt

  114 specifier_qualifier_list_opt: specifier_qualifier_list
  115                             | /* empty */

  116 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | ENUM IDENTIFIER

  119 identifier_opt: IDENTIFIER
  120               | /* empty */

  121 enumerator_list: enumerator
  122                | enumerator_list COMMA enumerator

  123 enumerator: IDENTIFIER
  124           | IDENTIFIER EQ constant_expression

  125 type_qualifier: CONST
  126               | RESTRICT
  127               | VOLATILE

  128 function_specifier: INLINE

  129 declarator: pointer direct_declarator
  130           | direct_declarator

  131 change_scope: /* empty */

  132 direct_declarator: IDENTIFIER
  133                  | PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE

  146 type_qualifier_list_opt: type_qualifier_list
  147                        | /* empty */

  148 pointer: STAR type_qualifier_list_opt
  149        | STAR type_qualifier_list_opt pointer

  150 type_qualifier_list: type_qualifier
  151                    | type_qualifier_list type_qualifier

  152 parameter_type_list: parameter_list
  153                    | parameter_list COMMA ELLIPSIS

  154 parameter_list: parameter_declaration
  155               | parameter_list COMMA parameter_declaration

  156 parameter_declaration: declaration_specifiers declarator
  157                      | declaration_specifiers

  158 identifier_list: IDENTIFIER
  159                | identifier_list COMMA IDENTIFIER

  160 type_name: specifier_qualifier_list

  161 initialiser: assignment_expression
  162            | CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
  163            | CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE

  164 initialiser_list: designation_opt initialiser
  165                 | initialiser_list COMMA designation_opt initialiser

  166 designation_opt: designation
  167                | /* empty */

  168 designation: designator_list EQ

  169 designator_list: designator
  170                | designator_list designator

  171 designator: SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | DOT IDENTIFIER

  173 statement: labeled_statement
  174          | compound_statement
  175          | expression_statement
  176          | selection_statement
  177          | iteration_statement
  178          | jump_statement

  179 labeled_statement: IDENTIFIER COLON statement
  180                  | CASE constant_expression COLON statement
  181                  | DEFAULT COLON statement

  182 change_block: /* empty */

  183 compound_statement: CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE

  184 block_item_list_opt: block_item_list
  185                    | /* empty */

  186 block_item_list: block_item
  187                | block_item_list M block_item

  188 block_item: declaration
  189           | statement

  190 expression_statement: expression_opt SEMI_COLON

  191 expression_opt: expression
  192               | /* empty */

  193 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement

  196 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

  200 jump_statement: GOTO IDENTIFIER SEMI_COLON
  201               | CONTINUE SEMI_COLON
  202               | BREAK SEMI_COLON
  203               | RETURN expression_opt SEMI_COLON

  204 translation_unit: external_declaration
  205                 | translation_unit external_declaration

  206 external_declaration: function_definition
  207                     | declaration

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

  209 declaration_list_opt: declaration_list
  210                     | /* empty */

  211 declaration_list: declaration
  212                 | declaration_list declaration


Terminals, with rules where they appear

$end (0) 0
error (256)
PARENTHESIS_OPEN (258) 6 9 14 15 25 33 133 143 144 145 193 194 195
    196 197 198 199
PARENTHESIS_CLOSE (259) 6 9 14 15 25 33 133 143 144 145 193 194 195
    196 197 198 199
CURLY_BRACE_OPEN (260) 14 15 116 117 162 163 183 208
CURLY_BRACE_CLOSE (261) 14 15 116 117 162 163 183 208
SQR_BRACE_OPEN (262) 8 134 135 136 137 138 139 140 141 142 171
SQR_BRACE_CLOSE (263) 8 134 135 136 137 138 139 140 141 142 171
INC_OP (264) 12 21
DEC_OP (265) 13 22
LEFT_OP (266) 42
RIGHT_OP (267) 43
EQ_OP (268) 50
NE_OP (269) 51
LTE_OP (270) 47
GTE_OP (271) 48
AND_OP (272) 61
OR_OP (273) 63
PTR_OP (274) 11
LT_OP (275) 45
GT_OP (276) 46
EQ (277) 68 94 124 168
DOT (278) 10 172
BITWISEAND (279) 26 53
BITWISEOR (280) 57
BITWISEXOR (281) 55
STAR (282) 27 35 141 142 148 149
PLUS (283) 28 39
MINUS (284) 29 40
NOT (285) 30
EXCLAMATION (286) 31
DIVIDE (287) 36
PERCENTAGE (288) 37
ADD_ASSIGN (289) 72
SUB_ASSIGN (290) 73
MUL_ASSIGN (291) 69
DIV_ASSIGN (292) 70
MOD_ASSIGN (293) 71
LEFT_ASSIGN (294) 74
RIGHT_ASSIGN (295) 75
OR_ASSIGN (296) 78
AND_ASSIGN (297) 76
XOR_ASSIGN (298) 77
COLON (299) 65 179 180 181
SEMI_COLON (300) 82 190 197 198 199 200 201 202 203
ELLIPSIS (301) 153
QUESTION_MARK (302) 65
COMMA (303) 15 19 80 92 117 122 153 155 159 163 165
HASH (304)
EXTERN (305) 95
STATIC (306) 96 138 139 140
AUTO (307) 97
REGISTER (308) 98
VOIDTYPE (309) 99
CHARTYPE (310) 100
SHORT (311) 101
INTTYPE (312) 102
LONG (313) 103
FLOATTYPE (314) 104
DOUBLE (315) 105
SIGNED (316) 106
UNSIGNED (317) 107
BOOL (318) 108
COMPLEX (319) 109
IMAGINARY (320) 110
CONST (321) 125
RESTRICT (322) 126
VOLATILE (323) 127
ENUM (324) 116 117 118
INLINE (325) 128
SIZEOF (326) 24 25
STRUCT (327)
TYPEDEF (328)
UNION (329)
IF (330) 193 194
ELSE (331) 194
CASE (332) 180
DEFAULT (333) 181
WHILE (334) 196 197
CONTINUE (335) 201
DO (336) 197
GOTO (337) 200
FOR (338) 198 199
RETURN (339) 203
BREAK (340) 202
SWITCH (341) 195
UNEXPECTED_TOKEN (342)
IDENTIFIER (343) 1 10 11 118 119 123 124 132 158 159 172 179 200
INTEGER_CONST (344) 2
FLOAT_CONST (345) 3
CHAR_CONST (346) 4
STRING_LITERAL (347) 5
THEN (348)


Nonterminals, with rules where they appear

$accept (94)
    on left: 0
primary_expression (95)
    on left: 1 2 3 4 5 6, on right: 7
postfix_expression (96)
    on left: 7 8 9 10 11 12 13 14 15, on right: 8 9 10 11 12 13 20
argument_expression_list_opt (97)
    on left: 16 17, on right: 9
argument_expression_list (98)
    on left: 18 19, on right: 16 19
unary_expression (99)
    on left: 20 21 22 23 24 25, on right: 21 22 24 32 67
unary_operator (100)
    on left: 26 27 28 29 30 31, on right: 23
cast_expression (101)
    on left: 32 33, on right: 23 33 34 35 36 37
multiplicative_expression (102)
    on left: 34 35 36 37, on right: 35 36 37 38 39 40
additive_expression (103)
    on left: 38 39 40, on right: 39 40 41 42 43
shift_expression (104)
    on left: 41 42 43, on right: 42 43 44 45 46 47 48
relational_expression (105)
    on left: 44 45 46 47 48, on right: 45 46 47 48 49 50 51
equality_expression (106)
    on left: 49 50 51, on right: 50 51 52 53
AND_expression (107)
    on left: 52 53, on right: 53 54 55
exclusive_OR_expression (108)
    on left: 54 55, on right: 55 56 57
inclusive_OR_expression (109)
    on left: 56 57, on right: 57 60 61
M (110)
    on left: 58, on right: 61 63 65 187 193 194 196 197 198
N (111)
    on left: 59, on right: 65 193 194 198
logical_AND_expression (112)
    on left: 60 61, on right: 61 62 63
logical_OR_expression (113)
    on left: 62 63, on right: 63 64 65
conditional_expression (114)
    on left: 64 65, on right: 65 66 81
assignment_expression (115)
    on left: 66 67, on right: 18 19 67 79 80 134 136 138 139 140 161
assignment_operator (116)
    on left: 68 69 70 71 72 73 74 75 76 77 78, on right: 67
expression (117)
    on left: 79 80, on right: 6 8 65 80 191 193 194 195 196 197
constant_expression (118)
    on left: 81, on right: 124 171 180
declaration (119)
    on left: 82, on right: 188 199 207 211 212
init_declarator_list_opt (120)
    on left: 83 84, on right: 82
declaration_specifiers (121)
    on left: 85 86 87 88, on right: 82 89 156 157 208
declaration_specifiers_opt (122)
    on left: 89 90, on right: 85 86 87 88
init_declarator_list (123)
    on left: 91 92, on right: 83 92
init_declarator (124)
    on left: 93 94, on right: 91 92
storage_class_specifier (125)
    on left: 95 96 97 98, on right: 85
type_specifier (126)
    on left: 99 100 101 102 103 104 105 106 107 108 109 110 111,
    on right: 86 112
specifier_qualifier_list (127)
    on left: 112 113, on right: 114 160
specifier_qualifier_list_opt (128)
    on left: 114 115, on right: 112 113
enum_specifier (129)
    on left: 116 117 118, on right: 111
identifier_opt (130)
    on left: 119 120, on right: 116 117
enumerator_list (131)
    on left: 121 122, on right: 116 117 122
enumerator (132)
    on left: 123 124, on right: 121 122
type_qualifier (133)
    on left: 125 126 127, on right: 87 113 150 151
function_specifier (134)
    on left: 128, on right: 88
declarator (135)
    on left: 129 130, on right: 93 94 133 156 208
change_scope (136)
    on left: 131, on right: 143 145 183 208
direct_declarator (137)
    on left: 132 133 134 135 136 137 138 139 140 141 142 143 144 145
   , on right: 129 130 134 135 136 137 138 139 140 141 142 143 144
    145
type_qualifier_list_opt (138)
    on left: 146 147, on right: 148 149
pointer (139)
    on left: 148 149, on right: 129 149
type_qualifier_list (140)
    on left: 150 151, on right: 134 135 138 140 141 146 151
parameter_type_list (141)
    on left: 152 153, on right: 143
parameter_list (142)
    on left: 154 155, on right: 152 153 155
parameter_declaration (143)
    on left: 156 157, on right: 154 155
identifier_list (144)
    on left: 158 159, on right: 144 159
type_name (145)
    on left: 160, on right: 14 15 25 33
initialiser (146)
    on left: 161 162 163, on right: 94 164 165
initialiser_list (147)
    on left: 164 165, on right: 14 15 162 163 165
designation_opt (148)
    on left: 166 167, on right: 164 165
designation (149)
    on left: 168, on right: 166
designator_list (150)
    on left: 169 170, on right: 168 170
designator (151)
    on left: 171 172, on right: 169 170
statement (152)
    on left: 173 174 175 176 177 178, on right: 179 180 181 189 193
    194 195 196 197 198 199
labeled_statement (153)
    on left: 179 180 181, on right: 173
change_block (154)
    on left: 182, on right: 183
compound_statement (155)
    on left: 183, on right: 174
block_item_list_opt (156)
    on left: 184 185, on right: 183 208
block_item_list (157)
    on left: 186 187, on right: 184 187
block_item (158)
    on left: 188 189, on right: 186 187
expression_statement (159)
    on left: 190, on right: 175
expression_opt (160)
    on left: 191 192, on right: 190 198 199 203
selection_statement (161)
    on left: 193 194 195, on right: 176
iteration_statement (162)
    on left: 196 197 198 199, on right: 177
jump_statement (163)
    on left: 200 201 202 203, on right: 178
translation_unit (164)
    on left: 204 205, on right: 0 205
external_declaration (165)
    on left: 206 207, on right: 204 205
function_definition (166)
    on left: 208, on right: 206
declaration_list_opt (167)
    on left: 209 210, on right: 208
declaration_list (168)
    on left: 211 212, on right: 209 212


state 0

    0 $accept: . translation_unit $end
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  204 translation_unit: . external_declaration
  205                 | . translation_unit external_declaration
  206 external_declaration: . function_definition
  207                     | . declaration
  208 function_definition: . declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


state 1

   95 storage_class_specifier: EXTERN .

    $default  reduce using rule 95 (storage_class_specifier)


state 2

   96 storage_class_specifier: STATIC .

    $default  reduce using rule 96 (storage_class_specifier)


state 3

   97 storage_class_specifier: AUTO .

    $default  reduce using rule 97 (storage_class_specifier)


state 4

   98 storage_class_specifier: REGISTER .

    $default  reduce using rule 98 (storage_class_specifier)


state 5

   99 type_specifier: VOIDTYPE .

    $default  reduce using rule 99 (type_specifier)


state 6

  100 type_specifier: CHARTYPE .

    $default  reduce using rule 100 (type_specifier)


state 7

  101 type_specifier: SHORT .

    $default  reduce using rule 101 (type_specifier)


state 8

  102 type_specifier: INTTYPE .

    $default  reduce using rule 102 (type_specifier)


state 9

  103 type_specifier: LONG .

    $default  reduce using rule 103 (type_specifier)


state 10

  104 type_specifier: FLOATTYPE .

    $default  reduce using rule 104 (type_specifier)


state 11

  105 type_specifier: DOUBLE .

    $default  reduce using rule 105 (type_specifier)


state 12

  106 type_specifier: SIGNED .

    $default  reduce using rule 106 (type_specifier)


state 13

  107 type_specifier: UNSIGNED .

    $default  reduce using rule 107 (type_specifier)


state 14

  108 type_specifier: BOOL .

    $default  reduce using rule 108 (type_specifier)


state 15

  109 type_specifier: COMPLEX .

    $default  reduce using rule 109 (type_specifier)


state 16

  110 type_specifier: IMAGINARY .

    $default  reduce using rule 110 (type_specifier)


state 17

  125 type_qualifier: CONST .

    $default  reduce using rule 125 (type_qualifier)


state 18

  126 type_qualifier: RESTRICT .

    $default  reduce using rule 126 (type_qualifier)


state 19

  127 type_qualifier: VOLATILE .

    $default  reduce using rule 127 (type_qualifier)


state 20

  116 enum_specifier: ENUM . identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | ENUM . identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | ENUM . IDENTIFIER
  119 identifier_opt: . IDENTIFIER
  120               | .  [CURLY_BRACE_OPEN]

    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 120 (identifier_opt)

    identifier_opt  go to state 33


state 21

  128 function_specifier: INLINE .

    $default  reduce using rule 128 (function_specifier)


state 22

  207 external_declaration: declaration .

    $default  reduce using rule 207 (external_declaration)


state 23

   82 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: . init_declarator_list
   84                         | .  [SEMI_COLON]
   91 init_declarator_list: . init_declarator
   92                     | . init_declarator_list COMMA init_declarator
   93 init_declarator: . declarator
   94                | . declarator EQ initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer
  208 function_definition: declaration_specifiers . declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 40
    direct_declarator         go to state 41
    pointer                   go to state 42


state 24

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   85                       | storage_class_specifier . declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 25

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   86                       | type_specifier . declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 26

  111 type_specifier: enum_specifier .

    $default  reduce using rule 111 (type_specifier)


state 27

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   87                       | type_qualifier . declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 28

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   88                       | function_specifier . declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, IDENTIFIER]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 47
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


state 29

    0 $accept: translation_unit . $end
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  205 translation_unit: translation_unit . external_declaration
  206 external_declaration: . function_definition
  207                     | . declaration
  208 function_definition: . declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    $end       shift, and go to state 48
    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 49
    function_definition      go to state 31


state 30

  204 translation_unit: external_declaration .

    $default  reduce using rule 204 (translation_unit)


state 31

  206 external_declaration: function_definition .

    $default  reduce using rule 206 (external_declaration)


state 32

  118 enum_specifier: ENUM IDENTIFIER .  [PARENTHESIS_OPEN, PARENTHESIS_CLOSE, STAR, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, IDENTIFIER]
  119 identifier_opt: IDENTIFIER .  [CURLY_BRACE_OPEN]

    CURLY_BRACE_OPEN  reduce using rule 119 (identifier_opt)
    $default          reduce using rule 118 (enum_specifier)


state 33

  116 enum_specifier: ENUM identifier_opt . CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | ENUM identifier_opt . CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 50


state 34

  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  133                  | PARENTHESIS_OPEN . declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    declarator         go to state 51
    direct_declarator  go to state 41
    pointer            go to state 42


state 35

  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  146 type_qualifier_list_opt: . type_qualifier_list
  147                        | .  [PARENTHESIS_OPEN, STAR, IDENTIFIER]
  148 pointer: STAR . type_qualifier_list_opt
  149        | STAR . type_qualifier_list_opt pointer
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    CONST     shift, and go to state 17
    RESTRICT  shift, and go to state 18
    VOLATILE  shift, and go to state 19

    $default  reduce using rule 147 (type_qualifier_list_opt)

    type_qualifier           go to state 52
    type_qualifier_list_opt  go to state 53
    type_qualifier_list      go to state 54


state 36

  132 direct_declarator: IDENTIFIER .

    $default  reduce using rule 132 (direct_declarator)


state 37

   82 declaration: declaration_specifiers init_declarator_list_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 55


state 38

   83 init_declarator_list_opt: init_declarator_list .  [SEMI_COLON]
   92 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA  shift, and go to state 56

    $default  reduce using rule 83 (init_declarator_list_opt)


state 39

   91 init_declarator_list: init_declarator .

    $default  reduce using rule 91 (init_declarator_list)


state 40

   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   93 init_declarator: declarator .  [SEMI_COLON, COMMA]
   94                | declarator . EQ initialiser
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  208 function_definition: declaration_specifiers declarator . declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE
  209 declaration_list_opt: . declaration_list
  210                     | .  [CURLY_BRACE_OPEN]
  211 declaration_list: . declaration
  212                 | . declaration_list declaration

    EQ         shift, and go to state 57
    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    CURLY_BRACE_OPEN  reduce using rule 210 (declaration_list_opt)
    $default          reduce using rule 93 (init_declarator)

    declaration              go to state 58
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list_opt     go to state 60
    declaration_list         go to state 61


state 41

  130 declarator: direct_declarator .  [PARENTHESIS_CLOSE, CURLY_BRACE_OPEN, EQ, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  134 direct_declarator: direct_declarator . SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | direct_declarator . SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator . SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | direct_declarator . SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator . SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | direct_declarator . SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | direct_declarator . PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | direct_declarator . PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | direct_declarator . PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 62
    SQR_BRACE_OPEN    shift, and go to state 63

    $default  reduce using rule 130 (declarator)


state 42

  129 declarator: pointer . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 34
    IDENTIFIER        shift, and go to state 36

    direct_declarator  go to state 64


state 43

   89 declaration_specifiers_opt: declaration_specifiers .

    $default  reduce using rule 89 (declaration_specifiers_opt)


state 44

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt .

    $default  reduce using rule 85 (declaration_specifiers)


state 45

   86 declaration_specifiers: type_specifier declaration_specifiers_opt .

    $default  reduce using rule 86 (declaration_specifiers)


state 46

   87 declaration_specifiers: type_qualifier declaration_specifiers_opt .

    $default  reduce using rule 87 (declaration_specifiers)


state 47

   88 declaration_specifiers: function_specifier declaration_specifiers_opt .

    $default  reduce using rule 88 (declaration_specifiers)


state 48

    0 $accept: translation_unit $end .

    $default  accept


state 49

  205 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 205 (translation_unit)


state 50

  116 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN . enumerator_list CURLY_BRACE_CLOSE
  117               | ENUM identifier_opt CURLY_BRACE_OPEN . enumerator_list COMMA CURLY_BRACE_CLOSE
  121 enumerator_list: . enumerator
  122                | . enumerator_list COMMA enumerator
  123 enumerator: . IDENTIFIER
  124           | . IDENTIFIER EQ constant_expression

    IDENTIFIER  shift, and go to state 65

    enumerator_list  go to state 66
    enumerator       go to state 67


state 51

  133 direct_declarator: PARENTHESIS_OPEN declarator . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 68


state 52

  150 type_qualifier_list: type_qualifier .

    $default  reduce using rule 150 (type_qualifier_list)


state 53

  148 pointer: . STAR type_qualifier_list_opt  [PARENTHESIS_OPEN, IDENTIFIER]
  148        | STAR type_qualifier_list_opt .  [PARENTHESIS_OPEN, IDENTIFIER]
  149        | . STAR type_qualifier_list_opt pointer
  149        | STAR type_qualifier_list_opt . pointer

    STAR  shift, and go to state 35

    $default  reduce using rule 148 (pointer)

    pointer  go to state 69


state 54

  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  146 type_qualifier_list_opt: type_qualifier_list .  [PARENTHESIS_OPEN, STAR, IDENTIFIER]
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 17
    RESTRICT  shift, and go to state 18
    VOLATILE  shift, and go to state 19

    $default  reduce using rule 146 (type_qualifier_list_opt)

    type_qualifier  go to state 70


state 55

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON .

    $default  reduce using rule 82 (declaration)


state 56

   92 init_declarator_list: init_declarator_list COMMA . init_declarator
   93 init_declarator: . declarator
   94                | . declarator EQ initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    init_declarator    go to state 71
    declarator         go to state 72
    direct_declarator  go to state 41
    pointer            go to state 42


state 57

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   94 init_declarator: declarator EQ . initialiser
  161 initialiser: . assignment_expression
  162            | . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
  163            | . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 106


state 58

  211 declaration_list: declaration .

    $default  reduce using rule 211 (declaration_list)


state 59

   82 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: . init_declarator_list
   84                         | .  [SEMI_COLON]
   91 init_declarator_list: . init_declarator
   92                     | . init_declarator_list COMMA init_declarator
   93 init_declarator: . declarator
   94                | . declarator EQ initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 72
    direct_declarator         go to state 41
    pointer                   go to state 42


state 60

  131 change_scope: .
  208 function_definition: declaration_specifiers declarator declaration_list_opt . change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 131 (change_scope)

    change_scope  go to state 107


state 61

   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  209 declaration_list_opt: declaration_list .  [CURLY_BRACE_OPEN]
  212 declaration_list: declaration_list . declaration

    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    $default  reduce using rule 209 (declaration_list_opt)

    declaration              go to state 108
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


state 62

  131 change_scope: .  [PARENTHESIS_CLOSE, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  143 direct_declarator: direct_declarator PARENTHESIS_OPEN . change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | direct_declarator PARENTHESIS_OPEN . identifier_list PARENTHESIS_CLOSE
  145                  | direct_declarator PARENTHESIS_OPEN . change_scope PARENTHESIS_CLOSE
  158 identifier_list: . IDENTIFIER
  159                | . identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 109

    $default  reduce using rule 131 (change_scope)

    change_scope     go to state 110
    identifier_list  go to state 111


state 63

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  134 direct_declarator: direct_declarator SQR_BRACE_OPEN . type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list SQR_BRACE_CLOSE
  136                  | direct_declarator SQR_BRACE_OPEN . assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator SQR_BRACE_OPEN . SQR_BRACE_CLOSE
  138                  | direct_declarator SQR_BRACE_OPEN . STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator SQR_BRACE_OPEN . STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN . type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | direct_declarator SQR_BRACE_OPEN . STAR SQR_BRACE_CLOSE
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    SQR_BRACE_CLOSE   shift, and go to state 112
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 113
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    STATIC            shift, and go to state 114
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 115
    type_qualifier             go to state 52
    type_qualifier_list        go to state 116


state 64

  129 declarator: pointer direct_declarator .  [PARENTHESIS_CLOSE, CURLY_BRACE_OPEN, EQ, SEMI_COLON, COMMA, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE]
  134 direct_declarator: direct_declarator . SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | direct_declarator . SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | direct_declarator . SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | direct_declarator . SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator . SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator . SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | direct_declarator . SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | direct_declarator . PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | direct_declarator . PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | direct_declarator . PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 62
    SQR_BRACE_OPEN    shift, and go to state 63

    $default  reduce using rule 129 (declarator)


state 65

  123 enumerator: IDENTIFIER .  [CURLY_BRACE_CLOSE, COMMA]
  124           | IDENTIFIER . EQ constant_expression

    EQ  shift, and go to state 117

    $default  reduce using rule 123 (enumerator)


state 66

  116 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list . CURLY_BRACE_CLOSE
  117               | ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list . COMMA CURLY_BRACE_CLOSE
  122 enumerator_list: enumerator_list . COMMA enumerator

    CURLY_BRACE_CLOSE  shift, and go to state 118
    COMMA              shift, and go to state 119


state 67

  121 enumerator_list: enumerator .

    $default  reduce using rule 121 (enumerator_list)


state 68

  133 direct_declarator: PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE .

    $default  reduce using rule 133 (direct_declarator)


state 69

  149 pointer: STAR type_qualifier_list_opt pointer .

    $default  reduce using rule 149 (pointer)


state 70

  151 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 151 (type_qualifier_list)


state 71

   92 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 92 (init_declarator_list)


state 72

   93 init_declarator: declarator .  [SEMI_COLON, COMMA]
   94                | declarator . EQ initialiser

    EQ  shift, and go to state 57

    $default  reduce using rule 93 (init_declarator)


state 73

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    6                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   14                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   33                | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 121
    type_specifier             go to state 122
    specifier_qualifier_list   go to state 123
    enum_specifier             go to state 26
    type_qualifier             go to state 124
    type_name                  go to state 125


state 74

  162 initialiser: CURLY_BRACE_OPEN . initialiser_list CURLY_BRACE_CLOSE
  163            | CURLY_BRACE_OPEN . initialiser_list COMMA CURLY_BRACE_CLOSE
  164 initialiser_list: . designation_opt initialiser
  165                 | . initialiser_list COMMA designation_opt initialiser
  166 designation_opt: . designation
  167                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  168 designation: . designator_list EQ
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 126
    DOT             shift, and go to state 127

    $default  reduce using rule 167 (designation_opt)

    initialiser_list  go to state 128
    designation_opt   go to state 129
    designation       go to state 130
    designator_list   go to state 131
    designator        go to state 132


state 75

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   21                 | INC_OP . unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 133
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 134
    unary_operator      go to state 92


state 76

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   22                 | DEC_OP . unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 133
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 135
    unary_operator      go to state 92


state 77

   26 unary_operator: BITWISEAND .

    $default  reduce using rule 26 (unary_operator)


state 78

   27 unary_operator: STAR .

    $default  reduce using rule 27 (unary_operator)


state 79

   28 unary_operator: PLUS .

    $default  reduce using rule 28 (unary_operator)


state 80

   29 unary_operator: MINUS .

    $default  reduce using rule 29 (unary_operator)


state 81

   30 unary_operator: NOT .

    $default  reduce using rule 30 (unary_operator)


state 82

   31 unary_operator: EXCLAMATION .

    $default  reduce using rule 31 (unary_operator)


state 83

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   24                 | SIZEOF . unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   25                 | SIZEOF . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION

    PARENTHESIS_OPEN  shift, and go to state 136
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 137
    unary_operator      go to state 92


state 84

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


state 85

    2 primary_expression: INTEGER_CONST .

    $default  reduce using rule 2 (primary_expression)


state 86

    3 primary_expression: FLOAT_CONST .

    $default  reduce using rule 3 (primary_expression)


state 87

    4 primary_expression: CHAR_CONST .

    $default  reduce using rule 4 (primary_expression)


state 88

    5 primary_expression: STRING_LITERAL .

    $default  reduce using rule 5 (primary_expression)


state 89

    7 postfix_expression: primary_expression .

    $default  reduce using rule 7 (postfix_expression)


state 90

    8 postfix_expression: postfix_expression . SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | postfix_expression . PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | postfix_expression . DOT IDENTIFIER
   11                   | postfix_expression . PTR_OP IDENTIFIER
   12                   | postfix_expression . INC_OP
   13                   | postfix_expression . DEC_OP
   20 unary_expression: postfix_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, EQ, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PARENTHESIS_OPEN  shift, and go to state 138
    SQR_BRACE_OPEN    shift, and go to state 139
    INC_OP            shift, and go to state 140
    DEC_OP            shift, and go to state 141
    PTR_OP            shift, and go to state 142
    DOT               shift, and go to state 143

    $default  reduce using rule 20 (unary_expression)


state 91

   32 cast_expression: unary_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, COLON, SEMI_COLON, QUESTION_MARK, COMMA]
   67 assignment_expression: unary_expression . assignment_operator assignment_expression
   68 assignment_operator: . EQ
   69                    | . MUL_ASSIGN
   70                    | . DIV_ASSIGN
   71                    | . MOD_ASSIGN
   72                    | . ADD_ASSIGN
   73                    | . SUB_ASSIGN
   74                    | . LEFT_ASSIGN
   75                    | . RIGHT_ASSIGN
   76                    | . AND_ASSIGN
   77                    | . XOR_ASSIGN
   78                    | . OR_ASSIGN

    EQ            shift, and go to state 144
    ADD_ASSIGN    shift, and go to state 145
    SUB_ASSIGN    shift, and go to state 146
    MUL_ASSIGN    shift, and go to state 147
    DIV_ASSIGN    shift, and go to state 148
    MOD_ASSIGN    shift, and go to state 149
    LEFT_ASSIGN   shift, and go to state 150
    RIGHT_ASSIGN  shift, and go to state 151
    OR_ASSIGN     shift, and go to state 152
    AND_ASSIGN    shift, and go to state 153
    XOR_ASSIGN    shift, and go to state 154

    $default  reduce using rule 32 (cast_expression)

    assignment_operator  go to state 155


state 92

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   23                 | unary_operator . cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 157


state 93

   34 multiplicative_expression: cast_expression .

    $default  reduce using rule 34 (multiplicative_expression)


state 94

   35 multiplicative_expression: multiplicative_expression . STAR cast_expression
   36                          | multiplicative_expression . DIVIDE cast_expression
   37                          | multiplicative_expression . PERCENTAGE cast_expression
   38 additive_expression: multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 158
    DIVIDE      shift, and go to state 159
    PERCENTAGE  shift, and go to state 160

    $default  reduce using rule 38 (additive_expression)


state 95

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   41 shift_expression: additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 41 (shift_expression)


state 96

   42 shift_expression: shift_expression . LEFT_OP additive_expression
   43                 | shift_expression . RIGHT_OP additive_expression
   44 relational_expression: shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 163
    RIGHT_OP  shift, and go to state 164

    $default  reduce using rule 44 (relational_expression)


state 97

   45 relational_expression: relational_expression . LT_OP shift_expression
   46                      | relational_expression . GT_OP shift_expression
   47                      | relational_expression . LTE_OP shift_expression
   48                      | relational_expression . GTE_OP shift_expression
   49 equality_expression: relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 165
    GTE_OP  shift, and go to state 166
    LT_OP   shift, and go to state 167
    GT_OP   shift, and go to state 168

    $default  reduce using rule 49 (equality_expression)


state 98

   50 equality_expression: equality_expression . EQ_OP relational_expression
   51                    | equality_expression . NE_OP relational_expression
   52 AND_expression: equality_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    EQ_OP  shift, and go to state 169
    NE_OP  shift, and go to state 170

    $default  reduce using rule 52 (AND_expression)


state 99

   53 AND_expression: AND_expression . BITWISEAND equality_expression
   54 exclusive_OR_expression: AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEAND  shift, and go to state 171

    $default  reduce using rule 54 (exclusive_OR_expression)


state 100

   55 exclusive_OR_expression: exclusive_OR_expression . BITWISEXOR AND_expression
   56 inclusive_OR_expression: exclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEXOR  shift, and go to state 172

    $default  reduce using rule 56 (inclusive_OR_expression)


state 101

   57 inclusive_OR_expression: inclusive_OR_expression . BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: inclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEOR  shift, and go to state 173

    $default  reduce using rule 60 (logical_AND_expression)


state 102

   61 logical_AND_expression: logical_AND_expression . AND_OP M inclusive_OR_expression
   62 logical_OR_expression: logical_AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    AND_OP  shift, and go to state 174

    $default  reduce using rule 62 (logical_OR_expression)


state 103

   59 N: .  [QUESTION_MARK]
   63 logical_OR_expression: logical_OR_expression . OR_OP M logical_AND_expression
   64 conditional_expression: logical_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, COLON, SEMI_COLON, COMMA]
   65                       | logical_OR_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    OR_OP  shift, and go to state 175

    QUESTION_MARK  reduce using rule 59 (N)
    $default       reduce using rule 64 (conditional_expression)

    N  go to state 176


state 104

   66 assignment_expression: conditional_expression .

    $default  reduce using rule 66 (assignment_expression)


state 105

  161 initialiser: assignment_expression .

    $default  reduce using rule 161 (initialiser)


state 106

   94 init_declarator: declarator EQ initialiser .

    $default  reduce using rule 94 (init_declarator)


state 107

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope . CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 177


state 108

  212 declaration_list: declaration_list declaration .

    $default  reduce using rule 212 (declaration_list)


state 109

  158 identifier_list: IDENTIFIER .

    $default  reduce using rule 158 (identifier_list)


state 110

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  143 direct_declarator: direct_declarator PARENTHESIS_OPEN change_scope . parameter_type_list PARENTHESIS_CLOSE
  145                  | direct_declarator PARENTHESIS_OPEN change_scope . PARENTHESIS_CLOSE
  152 parameter_type_list: . parameter_list
  153                    | . parameter_list COMMA ELLIPSIS
  154 parameter_list: . parameter_declaration
  155               | . parameter_list COMMA parameter_declaration
  156 parameter_declaration: . declaration_specifiers declarator
  157                      | . declaration_specifiers

    PARENTHESIS_CLOSE  shift, and go to state 178
    EXTERN             shift, and go to state 1
    STATIC             shift, and go to state 2
    AUTO               shift, and go to state 3
    REGISTER           shift, and go to state 4
    VOIDTYPE           shift, and go to state 5
    CHARTYPE           shift, and go to state 6
    SHORT              shift, and go to state 7
    INTTYPE            shift, and go to state 8
    LONG               shift, and go to state 9
    FLOATTYPE          shift, and go to state 10
    DOUBLE             shift, and go to state 11
    SIGNED             shift, and go to state 12
    UNSIGNED           shift, and go to state 13
    BOOL               shift, and go to state 14
    COMPLEX            shift, and go to state 15
    IMAGINARY          shift, and go to state 16
    CONST              shift, and go to state 17
    RESTRICT           shift, and go to state 18
    VOLATILE           shift, and go to state 19
    ENUM               shift, and go to state 20
    INLINE             shift, and go to state 21

    declaration_specifiers   go to state 179
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 180
    parameter_list           go to state 181
    parameter_declaration    go to state 182


state 111

  144 direct_declarator: direct_declarator PARENTHESIS_OPEN identifier_list . PARENTHESIS_CLOSE
  159 identifier_list: identifier_list . COMMA IDENTIFIER

    PARENTHESIS_CLOSE  shift, and go to state 183
    COMMA              shift, and go to state 184


state 112

  137 direct_declarator: direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE .

    $default  reduce using rule 137 (direct_declarator)


state 113

   27 unary_operator: STAR .  [PARENTHESIS_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  142 direct_declarator: direct_declarator SQR_BRACE_OPEN STAR . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 185

    $default  reduce using rule 27 (unary_operator)


state 114

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  138 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC . type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | direct_declarator SQR_BRACE_OPEN STATIC . assignment_expression SQR_BRACE_CLOSE
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 186
    type_qualifier             go to state 52
    type_qualifier_list        go to state 187


state 115

  136 direct_declarator: direct_declarator SQR_BRACE_OPEN assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 188


state 116

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  134 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list . assignment_expression SQR_BRACE_CLOSE
  135                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . SQR_BRACE_CLOSE
  140                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | direct_declarator SQR_BRACE_OPEN type_qualifier_list . STAR SQR_BRACE_CLOSE
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    SQR_BRACE_CLOSE   shift, and go to state 189
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 190
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    STATIC            shift, and go to state 191
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 192
    type_qualifier             go to state 70


state 117

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  124 enumerator: IDENTIFIER EQ . constant_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 194


state 118

  116 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 116 (enum_specifier)


state 119

  117 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA . CURLY_BRACE_CLOSE
  122 enumerator_list: enumerator_list COMMA . enumerator
  123 enumerator: . IDENTIFIER
  124           | . IDENTIFIER EQ constant_expression

    CURLY_BRACE_CLOSE  shift, and go to state 195
    IDENTIFIER         shift, and go to state 65

    enumerator  go to state 196


state 120

   79 expression: assignment_expression .

    $default  reduce using rule 79 (expression)


state 121

    6 primary_expression: PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE
   80 expression: expression . COMMA assignment_expression

    PARENTHESIS_CLOSE  shift, and go to state 197
    COMMA              shift, and go to state 198


state 122

   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  112                         | type_specifier . specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  114 specifier_qualifier_list_opt: . specifier_qualifier_list
  115                             | .  [PARENTHESIS_CLOSE]
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE

    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20

    $default  reduce using rule 115 (specifier_qualifier_list_opt)

    type_specifier                go to state 122
    specifier_qualifier_list      go to state 199
    specifier_qualifier_list_opt  go to state 200
    enum_specifier                go to state 26
    type_qualifier                go to state 124


state 123

  160 type_name: specifier_qualifier_list .

    $default  reduce using rule 160 (type_name)


state 124

   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  113                         | type_qualifier . specifier_qualifier_list_opt
  114 specifier_qualifier_list_opt: . specifier_qualifier_list
  115                             | .  [PARENTHESIS_CLOSE]
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE

    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20

    $default  reduce using rule 115 (specifier_qualifier_list_opt)

    type_specifier                go to state 122
    specifier_qualifier_list      go to state 199
    specifier_qualifier_list_opt  go to state 201
    enum_specifier                go to state 26
    type_qualifier                go to state 124


state 125

   14 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   33 cast_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE cast_expression

    PARENTHESIS_CLOSE  shift, and go to state 202


state 126

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  171 designator: SQR_BRACE_OPEN . constant_expression SQR_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 203


state 127

  172 designator: DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 204


state 128

  162 initialiser: CURLY_BRACE_OPEN initialiser_list . CURLY_BRACE_CLOSE
  163            | CURLY_BRACE_OPEN initialiser_list . COMMA CURLY_BRACE_CLOSE
  165 initialiser_list: initialiser_list . COMMA designation_opt initialiser

    CURLY_BRACE_CLOSE  shift, and go to state 205
    COMMA              shift, and go to state 206


state 129

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  161 initialiser: . assignment_expression
  162            | . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
  163            | . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
  164 initialiser_list: designation_opt . initialiser

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 207


state 130

  166 designation_opt: designation .

    $default  reduce using rule 166 (designation_opt)


state 131

  168 designation: designator_list . EQ
  170 designator_list: designator_list . designator
  171 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 126
    EQ              shift, and go to state 208
    DOT             shift, and go to state 127

    designator  go to state 209


state 132

  169 designator_list: designator .

    $default  reduce using rule 169 (designator_list)


state 133

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    6                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   14                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 121
    type_specifier             go to state 122
    specifier_qualifier_list   go to state 123
    enum_specifier             go to state 26
    type_qualifier             go to state 124
    type_name                  go to state 210


state 134

   21 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 21 (unary_expression)


state 135

   22 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 22 (unary_expression)


state 136

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    6                   | PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   14                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   25                 | SIZEOF PARENTHESIS_OPEN . type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 121
    type_specifier             go to state 122
    specifier_qualifier_list   go to state 123
    enum_specifier             go to state 26
    type_qualifier             go to state 124
    type_name                  go to state 211


state 137

   24 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 24 (unary_expression)


state 138

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
    9                   | postfix_expression PARENTHESIS_OPEN . argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   16 argument_expression_list_opt: . argument_expression_list
   17                             | .  [PARENTHESIS_CLOSE]
   18 argument_expression_list: . assignment_expression
   19                         | . argument_expression_list COMMA assignment_expression
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 17 (argument_expression_list_opt)

    primary_expression            go to state 89
    postfix_expression            go to state 90
    argument_expression_list_opt  go to state 212
    argument_expression_list      go to state 213
    unary_expression              go to state 91
    unary_operator                go to state 92
    cast_expression               go to state 93
    multiplicative_expression     go to state 94
    additive_expression           go to state 95
    shift_expression              go to state 96
    relational_expression         go to state 97
    equality_expression           go to state 98
    AND_expression                go to state 99
    exclusive_OR_expression       go to state 100
    inclusive_OR_expression       go to state 101
    logical_AND_expression        go to state 102
    logical_OR_expression         go to state 103
    conditional_expression        go to state 104
    assignment_expression         go to state 214


state 139

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    8                   | postfix_expression SQR_BRACE_OPEN . expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 215


state 140

   12 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 12 (postfix_expression)


state 141

   13 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 13 (postfix_expression)


state 142

   11 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 216


state 143

   10 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 217


state 144

   68 assignment_operator: EQ .

    $default  reduce using rule 68 (assignment_operator)


state 145

   72 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 72 (assignment_operator)


state 146

   73 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 73 (assignment_operator)


state 147

   69 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 69 (assignment_operator)


state 148

   70 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 70 (assignment_operator)


state 149

   71 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 71 (assignment_operator)


state 150

   74 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 74 (assignment_operator)


state 151

   75 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 75 (assignment_operator)


state 152

   78 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 78 (assignment_operator)


state 153

   76 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 76 (assignment_operator)


state 154

   77 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 77 (assignment_operator)


state 155

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   67                      | unary_expression assignment_operator . assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 218


state 156

   32 cast_expression: unary_expression .

    $default  reduce using rule 32 (cast_expression)


state 157

   23 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 23 (unary_expression)


state 158

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   35 multiplicative_expression: multiplicative_expression STAR . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 219


state 159

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   36 multiplicative_expression: multiplicative_expression DIVIDE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 220


state 160

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   37 multiplicative_expression: multiplicative_expression PERCENTAGE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 221


state 161

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   39 additive_expression: additive_expression PLUS . multiplicative_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 222


state 162

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   40 additive_expression: additive_expression MINUS . multiplicative_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 223


state 163

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_OP . additive_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 224


state 164

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_OP . additive_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 225


state 165

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   47 relational_expression: relational_expression LTE_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 226


state 166

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   48 relational_expression: relational_expression GTE_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 227


state 167

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   45 relational_expression: relational_expression LT_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 228


state 168

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   46 relational_expression: relational_expression GT_OP . shift_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 229


state 169

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   50 equality_expression: equality_expression EQ_OP . relational_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 230


state 170

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   51 equality_expression: equality_expression NE_OP . relational_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 231


state 171

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   53 AND_expression: AND_expression BITWISEAND . equality_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 232


state 172

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISEXOR . AND_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 233


state 173

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISEOR . exclusive_OR_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 234


state 174

   58 M: .
   61 logical_AND_expression: logical_AND_expression AND_OP . M inclusive_OR_expression

    $default  reduce using rule 58 (M)

    M  go to state 235


state 175

   58 M: .
   63 logical_OR_expression: logical_OR_expression OR_OP . M logical_AND_expression

    $default  reduce using rule 58 (M)

    M  go to state 236


state 176

   65 conditional_expression: logical_OR_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 237


state 177

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  184 block_item_list_opt: . block_item_list
  185                    | .  [CURLY_BRACE_CLOSE]
  186 block_item_list: . block_item
  187                | . block_item_list M block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON
  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN . block_item_list_opt CURLY_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    SEMI_COLON  reduce using rule 192 (expression_opt)
    $default    reduce using rule 185 (block_item_list_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item_list_opt        go to state 256
    block_item_list            go to state 257
    block_item                 go to state 258
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 178

  145 direct_declarator: direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE .

    $default  reduce using rule 145 (direct_declarator)


state 179

  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . PARENTHESIS_OPEN declarator PARENTHESIS_CLOSE
  134                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  135                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE
  136                  | . direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE
  137                  | . direct_declarator SQR_BRACE_OPEN SQR_BRACE_CLOSE
  138                  | . direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE
  139                  | . direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE
  140                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE
  141                  | . direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE
  142                  | . direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE
  143                  | . direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE
  144                  | . direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE
  145                  | . direct_declarator PARENTHESIS_OPEN change_scope PARENTHESIS_CLOSE
  148 pointer: . STAR type_qualifier_list_opt
  149        | . STAR type_qualifier_list_opt pointer
  156 parameter_declaration: declaration_specifiers . declarator
  157                      | declaration_specifiers .  [PARENTHESIS_CLOSE, COMMA]

    PARENTHESIS_OPEN  shift, and go to state 34
    STAR              shift, and go to state 35
    IDENTIFIER        shift, and go to state 36

    $default  reduce using rule 157 (parameter_declaration)

    declarator         go to state 264
    direct_declarator  go to state 41
    pointer            go to state 42


state 180

  143 direct_declarator: direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 265


state 181

  152 parameter_type_list: parameter_list .  [PARENTHESIS_CLOSE]
  153                    | parameter_list . COMMA ELLIPSIS
  155 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 266

    $default  reduce using rule 152 (parameter_type_list)


state 182

  154 parameter_list: parameter_declaration .

    $default  reduce using rule 154 (parameter_list)


state 183

  144 direct_declarator: direct_declarator PARENTHESIS_OPEN identifier_list PARENTHESIS_CLOSE .

    $default  reduce using rule 144 (direct_declarator)


state 184

  159 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 267


state 185

  142 direct_declarator: direct_declarator SQR_BRACE_OPEN STAR SQR_BRACE_CLOSE .

    $default  reduce using rule 142 (direct_declarator)


state 186

  139 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 268


state 187

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  138 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list . assignment_expression SQR_BRACE_CLOSE
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 269
    type_qualifier             go to state 70


state 188

  136 direct_declarator: direct_declarator SQR_BRACE_OPEN assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 136 (direct_declarator)


state 189

  135 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list SQR_BRACE_CLOSE .

    $default  reduce using rule 135 (direct_declarator)


state 190

   27 unary_operator: STAR .  [PARENTHESIS_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  141 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 270

    $default  reduce using rule 27 (unary_operator)


state 191

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  140 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC . assignment_expression SQR_BRACE_CLOSE

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 271


state 192

  134 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 272


state 193

   81 constant_expression: conditional_expression .

    $default  reduce using rule 81 (constant_expression)


state 194

  124 enumerator: IDENTIFIER EQ constant_expression .

    $default  reduce using rule 124 (enumerator)


state 195

  117 enum_specifier: ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 117 (enum_specifier)


state 196

  122 enumerator_list: enumerator_list COMMA enumerator .

    $default  reduce using rule 122 (enumerator_list)


state 197

    6 primary_expression: PARENTHESIS_OPEN expression PARENTHESIS_CLOSE .

    $default  reduce using rule 6 (primary_expression)


state 198

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   80 expression: expression COMMA . assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 273


state 199

  114 specifier_qualifier_list_opt: specifier_qualifier_list .

    $default  reduce using rule 114 (specifier_qualifier_list_opt)


state 200

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt .

    $default  reduce using rule 112 (specifier_qualifier_list)


state 201

  113 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt .

    $default  reduce using rule 113 (specifier_qualifier_list)


state 202

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   14                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   33                | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . cast_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 274
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 275


state 203

  171 designator: SQR_BRACE_OPEN constant_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 276


state 204

  172 designator: DOT IDENTIFIER .

    $default  reduce using rule 172 (designator)


state 205

  162 initialiser: CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 162 (initialiser)


state 206

  163 initialiser: CURLY_BRACE_OPEN initialiser_list COMMA . CURLY_BRACE_CLOSE
  165 initialiser_list: initialiser_list COMMA . designation_opt initialiser
  166 designation_opt: . designation
  167                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  168 designation: . designator_list EQ
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | . DOT IDENTIFIER

    CURLY_BRACE_CLOSE  shift, and go to state 277
    SQR_BRACE_OPEN     shift, and go to state 126
    DOT                shift, and go to state 127

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 278
    designation      go to state 130
    designator_list  go to state 131
    designator       go to state 132


state 207

  164 initialiser_list: designation_opt initialiser .

    $default  reduce using rule 164 (initialiser_list)


state 208

  168 designation: designator_list EQ .

    $default  reduce using rule 168 (designation)


state 209

  170 designator_list: designator_list designator .

    $default  reduce using rule 170 (designator_list)


state 210

   14 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 279


state 211

   14 postfix_expression: PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: SIZEOF PARENTHESIS_OPEN type_name . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 280


state 212

    9 postfix_expression: postfix_expression PARENTHESIS_OPEN argument_expression_list_opt . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE  shift, and go to state 281


state 213

   16 argument_expression_list_opt: argument_expression_list .  [PARENTHESIS_CLOSE]
   19 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 282

    $default  reduce using rule 16 (argument_expression_list_opt)


state 214

   18 argument_expression_list: assignment_expression .

    $default  reduce using rule 18 (argument_expression_list)


state 215

    8 postfix_expression: postfix_expression SQR_BRACE_OPEN expression . SQR_BRACE_CLOSE
   80 expression: expression . COMMA assignment_expression

    SQR_BRACE_CLOSE  shift, and go to state 283
    COMMA            shift, and go to state 198


state 216

   11 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 11 (postfix_expression)


state 217

   10 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 10 (postfix_expression)


state 218

   67 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 67 (assignment_expression)


state 219

   35 multiplicative_expression: multiplicative_expression STAR cast_expression .

    $default  reduce using rule 35 (multiplicative_expression)


state 220

   36 multiplicative_expression: multiplicative_expression DIVIDE cast_expression .

    $default  reduce using rule 36 (multiplicative_expression)


state 221

   37 multiplicative_expression: multiplicative_expression PERCENTAGE cast_expression .

    $default  reduce using rule 37 (multiplicative_expression)


state 222

   35 multiplicative_expression: multiplicative_expression . STAR cast_expression
   36                          | multiplicative_expression . DIVIDE cast_expression
   37                          | multiplicative_expression . PERCENTAGE cast_expression
   39 additive_expression: additive_expression PLUS multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 158
    DIVIDE      shift, and go to state 159
    PERCENTAGE  shift, and go to state 160

    $default  reduce using rule 39 (additive_expression)


state 223

   35 multiplicative_expression: multiplicative_expression . STAR cast_expression
   36                          | multiplicative_expression . DIVIDE cast_expression
   37                          | multiplicative_expression . PERCENTAGE cast_expression
   40 additive_expression: additive_expression MINUS multiplicative_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, PLUS, MINUS, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    STAR        shift, and go to state 158
    DIVIDE      shift, and go to state 159
    PERCENTAGE  shift, and go to state 160

    $default  reduce using rule 40 (additive_expression)


state 224

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_OP additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 42 (shift_expression)


state 225

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_OP additive_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 43 (shift_expression)


state 226

   42 shift_expression: shift_expression . LEFT_OP additive_expression
   43                 | shift_expression . RIGHT_OP additive_expression
   47 relational_expression: relational_expression LTE_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 163
    RIGHT_OP  shift, and go to state 164

    $default  reduce using rule 47 (relational_expression)


state 227

   42 shift_expression: shift_expression . LEFT_OP additive_expression
   43                 | shift_expression . RIGHT_OP additive_expression
   48 relational_expression: relational_expression GTE_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 163
    RIGHT_OP  shift, and go to state 164

    $default  reduce using rule 48 (relational_expression)


state 228

   42 shift_expression: shift_expression . LEFT_OP additive_expression
   43                 | shift_expression . RIGHT_OP additive_expression
   45 relational_expression: relational_expression LT_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 163
    RIGHT_OP  shift, and go to state 164

    $default  reduce using rule 45 (relational_expression)


state 229

   42 shift_expression: shift_expression . LEFT_OP additive_expression
   43                 | shift_expression . RIGHT_OP additive_expression
   46 relational_expression: relational_expression GT_OP shift_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LEFT_OP   shift, and go to state 163
    RIGHT_OP  shift, and go to state 164

    $default  reduce using rule 46 (relational_expression)


state 230

   45 relational_expression: relational_expression . LT_OP shift_expression
   46                      | relational_expression . GT_OP shift_expression
   47                      | relational_expression . LTE_OP shift_expression
   48                      | relational_expression . GTE_OP shift_expression
   50 equality_expression: equality_expression EQ_OP relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 165
    GTE_OP  shift, and go to state 166
    LT_OP   shift, and go to state 167
    GT_OP   shift, and go to state 168

    $default  reduce using rule 50 (equality_expression)


state 231

   45 relational_expression: relational_expression . LT_OP shift_expression
   46                      | relational_expression . GT_OP shift_expression
   47                      | relational_expression . LTE_OP shift_expression
   48                      | relational_expression . GTE_OP shift_expression
   51 equality_expression: equality_expression NE_OP relational_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, EQ_OP, NE_OP, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    LTE_OP  shift, and go to state 165
    GTE_OP  shift, and go to state 166
    LT_OP   shift, and go to state 167
    GT_OP   shift, and go to state 168

    $default  reduce using rule 51 (equality_expression)


state 232

   50 equality_expression: equality_expression . EQ_OP relational_expression
   51                    | equality_expression . NE_OP relational_expression
   53 AND_expression: AND_expression BITWISEAND equality_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEAND, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    EQ_OP  shift, and go to state 169
    NE_OP  shift, and go to state 170

    $default  reduce using rule 53 (AND_expression)


state 233

   53 AND_expression: AND_expression . BITWISEAND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISEXOR AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, BITWISEXOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEAND  shift, and go to state 171

    $default  reduce using rule 55 (exclusive_OR_expression)


state 234

   55 exclusive_OR_expression: exclusive_OR_expression . BITWISEXOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISEOR exclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, BITWISEOR, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEXOR  shift, and go to state 172

    $default  reduce using rule 57 (inclusive_OR_expression)


state 235

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression AND_OP M . inclusive_OR_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 284


state 236

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression OR_OP M . logical_AND_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 285


state 237

   58 M: .
   65 conditional_expression: logical_OR_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 286


state 238

  182 change_block: .
  183 compound_statement: CURLY_BRACE_OPEN . change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 182 (change_block)

    change_block  go to state 287


state 239

  193 selection_statement: IF . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | IF . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement

    PARENTHESIS_OPEN  shift, and go to state 288


state 240

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  180 labeled_statement: CASE . constant_expression COLON statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 289


state 241

  181 labeled_statement: DEFAULT . COLON statement

    COLON  shift, and go to state 290


state 242

   58 M: .
  196 iteration_statement: WHILE . M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 291


state 243

  201 jump_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 292


state 244

   58 M: .
  197 iteration_statement: DO . M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 293


state 245

  200 jump_statement: GOTO . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 294


state 246

  198 iteration_statement: FOR . PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | FOR . PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 295


state 247

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  203 jump_statement: RETURN . expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    expression_opt             go to state 296


state 248

  202 jump_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 297


state 249

  195 selection_statement: SWITCH . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 298


state 250

    1 primary_expression: IDENTIFIER .  [PARENTHESIS_OPEN, SQR_BRACE_OPEN, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, PTR_OP, LT_OP, GT_OP, EQ, DOT, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, SEMI_COLON, QUESTION_MARK, COMMA]
  179 labeled_statement: IDENTIFIER . COLON statement

    COLON  shift, and go to state 299

    $default  reduce using rule 1 (primary_expression)


state 251

   80 expression: expression . COMMA assignment_expression
  191 expression_opt: expression .  [PARENTHESIS_CLOSE, SEMI_COLON]

    COMMA  shift, and go to state 198

    $default  reduce using rule 191 (expression_opt)


state 252

  188 block_item: declaration .

    $default  reduce using rule 188 (block_item)


state 253

  189 block_item: statement .

    $default  reduce using rule 189 (block_item)


state 254

  173 statement: labeled_statement .

    $default  reduce using rule 173 (statement)


state 255

  174 statement: compound_statement .

    $default  reduce using rule 174 (statement)


state 256

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt . CURLY_BRACE_CLOSE

    CURLY_BRACE_CLOSE  shift, and go to state 300


state 257

   58 M: .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SEMI_COLON, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, SIZEOF, IF, CASE, DEFAULT, WHILE, CONTINUE, DO, GOTO, FOR, RETURN, BREAK, SWITCH, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  184 block_item_list_opt: block_item_list .  [CURLY_BRACE_CLOSE]
  187 block_item_list: block_item_list . M block_item

    CURLY_BRACE_CLOSE  reduce using rule 184 (block_item_list_opt)
    $default           reduce using rule 58 (M)

    M  go to state 301


state 258

  186 block_item_list: block_item .

    $default  reduce using rule 186 (block_item_list)


state 259

  175 statement: expression_statement .

    $default  reduce using rule 175 (statement)


state 260

  190 expression_statement: expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 302


state 261

  176 statement: selection_statement .

    $default  reduce using rule 176 (statement)


state 262

  177 statement: iteration_statement .

    $default  reduce using rule 177 (statement)


state 263

  178 statement: jump_statement .

    $default  reduce using rule 178 (statement)


state 264

  156 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 156 (parameter_declaration)


state 265

  143 direct_declarator: direct_declarator PARENTHESIS_OPEN change_scope parameter_type_list PARENTHESIS_CLOSE .

    $default  reduce using rule 143 (direct_declarator)


state 266

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  153 parameter_type_list: parameter_list COMMA . ELLIPSIS
  155 parameter_list: parameter_list COMMA . parameter_declaration
  156 parameter_declaration: . declaration_specifiers declarator
  157                      | . declaration_specifiers

    ELLIPSIS   shift, and go to state 303
    EXTERN     shift, and go to state 1
    STATIC     shift, and go to state 2
    AUTO       shift, and go to state 3
    REGISTER   shift, and go to state 4
    VOIDTYPE   shift, and go to state 5
    CHARTYPE   shift, and go to state 6
    SHORT      shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    FLOATTYPE  shift, and go to state 10
    DOUBLE     shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 16
    CONST      shift, and go to state 17
    RESTRICT   shift, and go to state 18
    VOLATILE   shift, and go to state 19
    ENUM       shift, and go to state 20
    INLINE     shift, and go to state 21

    declaration_specifiers   go to state 179
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 304


state 267

  159 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 159 (identifier_list)


state 268

  139 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 139 (direct_declarator)


state 269

  138 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 305


state 270

  141 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STAR SQR_BRACE_CLOSE .

    $default  reduce using rule 141 (direct_declarator)


state 271

  140 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression . SQR_BRACE_CLOSE

    SQR_BRACE_CLOSE  shift, and go to state 306


state 272

  134 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 134 (direct_declarator)


state 273

   80 expression: expression COMMA assignment_expression .

    $default  reduce using rule 80 (expression)


state 274

   14 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN . initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN . initialiser_list COMMA CURLY_BRACE_CLOSE
  164 initialiser_list: . designation_opt initialiser
  165                 | . initialiser_list COMMA designation_opt initialiser
  166 designation_opt: . designation
  167                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  168 designation: . designator_list EQ
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | . DOT IDENTIFIER

    SQR_BRACE_OPEN  shift, and go to state 126
    DOT             shift, and go to state 127

    $default  reduce using rule 167 (designation_opt)

    initialiser_list  go to state 307
    designation_opt   go to state 129
    designation       go to state 130
    designator_list   go to state 131
    designator        go to state 132


state 275

   33 cast_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression .

    $default  reduce using rule 33 (cast_expression)


state 276

  171 designator: SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 171 (designator)


state 277

  163 initialiser: CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 163 (initialiser)


state 278

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  161 initialiser: . assignment_expression
  162            | . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
  163            | . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
  165 initialiser_list: initialiser_list COMMA designation_opt . initialiser

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 74
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 308


state 279

   14 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE

    CURLY_BRACE_OPEN  shift, and go to state 274


state 280

   14 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE . CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   25 unary_expression: SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, LEFT_OP, RIGHT_OP, EQ_OP, NE_OP, LTE_OP, GTE_OP, AND_OP, OR_OP, LT_OP, GT_OP, EQ, BITWISEAND, BITWISEOR, BITWISEXOR, STAR, PLUS, MINUS, DIVIDE, PERCENTAGE, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, OR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    CURLY_BRACE_OPEN  shift, and go to state 274

    $default  reduce using rule 25 (unary_expression)


state 281

    9 postfix_expression: postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE .

    $default  reduce using rule 9 (postfix_expression)


state 282

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   19 argument_expression_list: argument_expression_list COMMA . assignment_expression
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 309


state 283

    8 postfix_expression: postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE .

    $default  reduce using rule 8 (postfix_expression)


state 284

   57 inclusive_OR_expression: inclusive_OR_expression . BITWISEOR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression AND_OP M inclusive_OR_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, AND_OP, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    BITWISEOR  shift, and go to state 173

    $default  reduce using rule 61 (logical_AND_expression)


state 285

   61 logical_AND_expression: logical_AND_expression . AND_OP M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression OR_OP M logical_AND_expression .  [PARENTHESIS_CLOSE, CURLY_BRACE_CLOSE, SQR_BRACE_CLOSE, OR_OP, COLON, SEMI_COLON, QUESTION_MARK, COMMA]

    AND_OP  shift, and go to state 174

    $default  reduce using rule 63 (logical_OR_expression)


state 286

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M . expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 310


state 287

  131 change_scope: .
  183 compound_statement: CURLY_BRACE_OPEN change_block . change_scope block_item_list_opt CURLY_BRACE_CLOSE

    $default  reduce using rule 131 (change_scope)

    change_scope  go to state 311


state 288

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  193 selection_statement: IF PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement N
  194                    | IF PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement N ELSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 312


state 289

  180 labeled_statement: CASE constant_expression . COLON statement

    COLON  shift, and go to state 313


state 290

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  181                  | DEFAULT COLON . statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 314
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 291

  196 iteration_statement: WHILE M . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 315


state 292

  201 jump_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 201 (jump_statement)


state 293

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  197                    | DO M . statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 316
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 294

  200 jump_statement: GOTO IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 317


state 295

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  198 iteration_statement: FOR PARENTHESIS_OPEN . expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | FOR PARENTHESIS_OPEN . declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    declaration                go to state 318
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    expression_opt             go to state 319


state 296

  203 jump_statement: RETURN expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 320


state 297

  202 jump_statement: BREAK SEMI_COLON .

    $default  reduce using rule 202 (jump_statement)


state 298

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  195 selection_statement: SWITCH PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 321


state 299

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  179                  | IDENTIFIER COLON . statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 322
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 300

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope CURLY_BRACE_OPEN block_item_list_opt CURLY_BRACE_CLOSE .

    $default  reduce using rule 208 (function_definition)


state 301

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  187 block_item_list: block_item_list M . block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item                 go to state 323
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 302

  190 expression_statement: expression_opt SEMI_COLON .

    $default  reduce using rule 190 (expression_statement)


state 303

  153 parameter_type_list: parameter_list COMMA ELLIPSIS .

    $default  reduce using rule 153 (parameter_type_list)


state 304

  155 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 155 (parameter_list)


state 305

  138 direct_declarator: direct_declarator SQR_BRACE_OPEN STATIC type_qualifier_list assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 138 (direct_declarator)


state 306

  140 direct_declarator: direct_declarator SQR_BRACE_OPEN type_qualifier_list STATIC assignment_expression SQR_BRACE_CLOSE .

    $default  reduce using rule 140 (direct_declarator)


state 307

   14 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list . CURLY_BRACE_CLOSE
   15                   | PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list . COMMA CURLY_BRACE_CLOSE
  165 initialiser_list: initialiser_list . COMMA designation_opt initialiser

    CURLY_BRACE_CLOSE  shift, and go to state 324
    COMMA              shift, and go to state 325


state 308

  165 initialiser_list: initialiser_list COMMA designation_opt initialiser .

    $default  reduce using rule 165 (initialiser_list)


state 309

   19 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 19 (argument_expression_list)


state 310

   59 N: .  [COLON]
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression . N COLON M conditional_expression
   80 expression: expression . COMMA assignment_expression

    COMMA  shift, and go to state 198

    $default  reduce using rule 59 (N)

    N  go to state 326


state 311

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . BOOL
  109               | . COMPLEX
  110               | . IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list CURLY_BRACE_CLOSE
  117               | . ENUM identifier_opt CURLY_BRACE_OPEN enumerator_list COMMA CURLY_BRACE_CLOSE
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  183                   | CURLY_BRACE_OPEN change_block change_scope . block_item_list_opt CURLY_BRACE_CLOSE
  184 block_item_list_opt: . block_item_list
  185                    | .  [CURLY_BRACE_CLOSE]
  186 block_item_list: . block_item
  187                | . block_item_list M block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    EXTERN            shift, and go to state 1
    STATIC            shift, and go to state 2
    AUTO              shift, and go to state 3
    REGISTER          shift, and go to state 4
    VOIDTYPE          shift, and go to state 5
    CHARTYPE          shift, and go to state 6
    SHORT             shift, and go to state 7
    INTTYPE           shift, and go to state 8
    LONG              shift, and go to state 9
    FLOATTYPE         shift, and go to state 10
    DOUBLE            shift, and go to state 11
    SIGNED            shift, and go to state 12
    UNSIGNED          shift, and go to state 13
    BOOL              shift, and go to state 14
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 16
    CONST             shift, and go to state 17
    RESTRICT          shift, and go to state 18
    VOLATILE          shift, and go to state 19
    ENUM              shift, and go to state 20
    INLINE            shift, and go to state 21
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    SEMI_COLON  reduce using rule 192 (expression_opt)
    $default    reduce using rule 185 (block_item_list_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item_list_opt        go to state 327
    block_item_list            go to state 257
    block_item                 go to state 258
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 312

   80 expression: expression . COMMA assignment_expression
  193 selection_statement: IF PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement N
  194                    | IF PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement N ELSE M statement

    PARENTHESIS_CLOSE  shift, and go to state 328
    COMMA              shift, and go to state 198


state 313

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  180                  | CASE constant_expression COLON . statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 329
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 314

  181 labeled_statement: DEFAULT COLON statement .

    $default  reduce using rule 181 (labeled_statement)


state 315

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  196 iteration_statement: WHILE M PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 330


state 316

   58 M: .
  197 iteration_statement: DO M statement . M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 331


state 317

  200 jump_statement: GOTO IDENTIFIER SEMI_COLON .

    $default  reduce using rule 200 (jump_statement)


state 318

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  199 iteration_statement: FOR PARENTHESIS_OPEN declaration . expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    expression_opt             go to state 332


state 319

  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt . SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    SEMI_COLON  shift, and go to state 333


state 320

  203 jump_statement: RETURN expression_opt SEMI_COLON .

    $default  reduce using rule 203 (jump_statement)


state 321

   80 expression: expression . COMMA assignment_expression
  195 selection_statement: SWITCH PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE statement

    PARENTHESIS_CLOSE  shift, and go to state 334
    COMMA              shift, and go to state 198


state 322

  179 labeled_statement: IDENTIFIER COLON statement .

    $default  reduce using rule 179 (labeled_statement)


state 323

  187 block_item_list: block_item_list M block_item .

    $default  reduce using rule 187 (block_item_list)


state 324

   14 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE .

    $default  reduce using rule 14 (postfix_expression)


state 325

   15 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA . CURLY_BRACE_CLOSE
  165 initialiser_list: initialiser_list COMMA . designation_opt initialiser
  166 designation_opt: . designation
  167                | .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SIZEOF, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  168 designation: . designator_list EQ
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . SQR_BRACE_OPEN constant_expression SQR_BRACE_CLOSE
  172           | . DOT IDENTIFIER

    CURLY_BRACE_CLOSE  shift, and go to state 335
    SQR_BRACE_OPEN     shift, and go to state 126
    DOT                shift, and go to state 127

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 278
    designation      go to state 130
    designator_list  go to state 131
    designator       go to state 132


state 326

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 336


state 327

  183 compound_statement: CURLY_BRACE_OPEN change_block change_scope block_item_list_opt . CURLY_BRACE_CLOSE

    CURLY_BRACE_CLOSE  shift, and go to state 337


state 328

   58 M: .
  193 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement N
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement N ELSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 338


state 329

  180 labeled_statement: CASE constant_expression COLON statement .

    $default  reduce using rule 180 (labeled_statement)


state 330

   80 expression: expression . COMMA assignment_expression
  196 iteration_statement: WHILE M PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE M statement

    PARENTHESIS_CLOSE  shift, and go to state 339
    COMMA              shift, and go to state 198


state 331

  197 iteration_statement: DO M statement M . WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    WHILE  shift, and go to state 340


state 332

  199 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt . SEMI_COLON expression_opt PARENTHESIS_CLOSE statement

    SEMI_COLON  shift, and go to state 341


state 333

   58 M: .
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON . M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 342


state 334

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  195                    | SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 343
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 335

   15 postfix_expression: PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE .

    $default  reduce using rule 15 (postfix_expression)


state 336

   58 M: .
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 344


state 337

  183 compound_statement: CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE .

    $default  reduce using rule 183 (compound_statement)


state 338

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  193                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 345
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 339

   58 M: .
  196 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . M statement

    $default  reduce using rule 58 (M)

    M  go to state 346


state 340

  197 iteration_statement: DO M statement M WHILE . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 347


state 341

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | .  [PARENTHESIS_CLOSE]
  199 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON . expression_opt PARENTHESIS_CLOSE statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    expression_opt             go to state 348


state 342

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M . expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    expression_opt             go to state 349


state 343

  195 selection_statement: SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement .

    $default  reduce using rule 195 (selection_statement)


state 344

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 350


state 345

   59 N: .
  193 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement . N
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement . N ELSE M statement

    $default  reduce using rule 59 (N)

    N  go to state 351


state 346

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  196                    | WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M . statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 352
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 347

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  197 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN . expression PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 353


state 348

  199 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt . PARENTHESIS_CLOSE statement

    PARENTHESIS_CLOSE  shift, and go to state 354


state 349

  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt . SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement

    SEMI_COLON  shift, and go to state 355


state 350

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 65 (conditional_expression)


state 351

  193 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N .  [PARENTHESIS_OPEN, CURLY_BRACE_OPEN, CURLY_BRACE_CLOSE, INC_OP, DEC_OP, BITWISEAND, STAR, PLUS, MINUS, NOT, EXCLAMATION, SEMI_COLON, EXTERN, STATIC, AUTO, REGISTER, VOIDTYPE, CHARTYPE, SHORT, INTTYPE, LONG, FLOATTYPE, DOUBLE, SIGNED, UNSIGNED, BOOL, COMPLEX, IMAGINARY, CONST, RESTRICT, VOLATILE, ENUM, INLINE, SIZEOF, IF, CASE, DEFAULT, WHILE, CONTINUE, DO, GOTO, FOR, RETURN, BREAK, SWITCH, IDENTIFIER, INTEGER_CONST, FLOAT_CONST, CHAR_CONST, STRING_LITERAL]
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N . ELSE M statement

    ELSE  shift, and go to state 356

    $default  reduce using rule 193 (selection_statement)

    Conflict between rule 193 and token ELSE resolved as shift (%right ELSE).


state 352

  196 iteration_statement: WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement .

    $default  reduce using rule 196 (iteration_statement)


state 353

   80 expression: expression . COMMA assignment_expression
  197 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression . PARENTHESIS_CLOSE SEMI_COLON

    PARENTHESIS_CLOSE  shift, and go to state 357
    COMMA              shift, and go to state 198


state 354

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  199                    | FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE . statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 358
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 355

   58 M: .
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON . M expression_opt N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 359


state 356

   58 M: .
  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE . M statement

    $default  reduce using rule 58 (M)

    M  go to state 360


state 357

  197 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE . SEMI_COLON

    SEMI_COLON  shift, and go to state 361


state 358

  199 iteration_statement: FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement .

    $default  reduce using rule 199 (iteration_statement)


state 359

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | .  [PARENTHESIS_CLOSE]
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M . expression_opt N PARENTHESIS_CLOSE M statement

    PARENTHESIS_OPEN  shift, and go to state 73
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IDENTIFIER        shift, and go to state 84
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    expression_opt             go to state 362


state 360

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  194                    | IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M . statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 363
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 361

  197 iteration_statement: DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON .

    $default  reduce using rule 197 (iteration_statement)


state 362

   59 N: .
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt . N PARENTHESIS_CLOSE M statement

    $default  reduce using rule 59 (N)

    N  go to state 364


state 363

  194 selection_statement: IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement .

    $default  reduce using rule 194 (selection_statement)


state 364

  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N . PARENTHESIS_CLOSE M statement

    PARENTHESIS_CLOSE  shift, and go to state 365


state 365

   58 M: .
  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE . M statement

    $default  reduce using rule 58 (M)

    M  go to state 366


state 366

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONST
    3                   | . FLOAT_CONST
    4                   | . CHAR_CONST
    5                   | . STRING_LITERAL
    6                   | . PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression SQR_BRACE_OPEN expression SQR_BRACE_CLOSE
    9                   | . postfix_expression PARENTHESIS_OPEN argument_expression_list_opt PARENTHESIS_CLOSE
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression PTR_OP IDENTIFIER
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list CURLY_BRACE_CLOSE
   15                   | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE CURLY_BRACE_OPEN initialiser_list COMMA CURLY_BRACE_CLOSE
   20 unary_expression: . postfix_expression
   21                 | . INC_OP unary_expression
   22                 | . DEC_OP unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE
   26 unary_operator: . BITWISEAND
   27               | . STAR
   28               | . PLUS
   29               | . MINUS
   30               | . NOT
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . PARENTHESIS_OPEN type_name PARENTHESIS_CLOSE cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression STAR cast_expression
   36                          | . multiplicative_expression DIVIDE cast_expression
   37                          | . multiplicative_expression PERCENTAGE cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_OP additive_expression
   43                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LT_OP shift_expression
   46                      | . relational_expression GT_OP shift_expression
   47                      | . relational_expression LTE_OP shift_expression
   48                      | . relational_expression GTE_OP shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQ_OP relational_expression
   51                    | . equality_expression NE_OP relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISEAND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISEXOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISEOR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression AND_OP M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression OR_OP M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . CURLY_BRACE_OPEN change_block change_scope block_item_list_opt CURLY_BRACE_CLOSE
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | .  [SEMI_COLON]
  193 selection_statement: . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N
  194                    | . IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement N ELSE M statement
  195                    | . SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement
  196 iteration_statement: . WHILE M PARENTHESIS_OPEN expression PARENTHESIS_CLOSE M statement
  197                    | . DO M statement M WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMI_COLON
  198                    | . FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement
  198                    | FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M . statement
  199                    | . FOR PARENTHESIS_OPEN declaration expression_opt SEMI_COLON expression_opt PARENTHESIS_CLOSE statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    PARENTHESIS_OPEN  shift, and go to state 73
    CURLY_BRACE_OPEN  shift, and go to state 238
    INC_OP            shift, and go to state 75
    DEC_OP            shift, and go to state 76
    BITWISEAND        shift, and go to state 77
    STAR              shift, and go to state 78
    PLUS              shift, and go to state 79
    MINUS             shift, and go to state 80
    NOT               shift, and go to state 81
    EXCLAMATION       shift, and go to state 82
    SIZEOF            shift, and go to state 83
    IF                shift, and go to state 239
    CASE              shift, and go to state 240
    DEFAULT           shift, and go to state 241
    WHILE             shift, and go to state 242
    CONTINUE          shift, and go to state 243
    DO                shift, and go to state 244
    GOTO              shift, and go to state 245
    FOR               shift, and go to state 246
    RETURN            shift, and go to state 247
    BREAK             shift, and go to state 248
    SWITCH            shift, and go to state 249
    IDENTIFIER        shift, and go to state 250
    INTEGER_CONST     shift, and go to state 85
    FLOAT_CONST       shift, and go to state 86
    CHAR_CONST        shift, and go to state 87
    STRING_LITERAL    shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 120
    expression                 go to state 251
    statement                  go to state 367
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


state 367

  198 iteration_statement: FOR PARENTHESIS_OPEN expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N PARENTHESIS_CLOSE M statement .

    $default  reduce using rule 198 (iteration_statement)
